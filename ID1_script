'	This experiment has been generated with E-Prime version: 2.0.10.356
'
'	This file generated with E-Studio interface.
'	E-Prime Copyright Â© 1996-2015 Psychology Software Tools.
'	ALL RIGHTS RESERVED
'
'	Legal use of this experiment script requires a full E-Prime or Runtime License.
'
'
'	Author:
'		GW-ISM-aio (University of Twente)
'	Curator
'		Russell Weili Chan @ russellweilichan@gmail.com
'
'
'

Option CStrings On
Dim ebContext as Context

'--------------------------------------------------------------------------
' Class Declarations
'--------------------------------------------------------------------------

'--------------------------------------------------------------------------
' Instance Declarations
'--------------------------------------------------------------------------
Dim ebSound As SoundDevice
Dim Keyboard As KeyboardDevice
Dim Mouse As MouseDevice
Dim ebDisplay As DisplayDevice
Dim MVNudpCommands As SocketDevice
' List Attribute Constants
Const attrib_weight = ebUCase_W & ebLCase_e & ebLCase_i & ebLCase_g & ebLCase_h & ebLCase_t
Const attrib_nested = ebUCase_N & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d
Const attrib_procedure = ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
Const attrib_correctanswer = ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_s & ebLCase_w & ebLCase_e & ebLCase_r
Const attrib_gonogo = ebLCase_g & ebLCase_o & ebLCase_n & ebLCase_o & ebLCase_g & ebLCase_o
Dim BlockList1 As List
Dim Cuelist1 As List
Dim List2 As List
Dim List1 As List
Dim List3 As List
Dim SessionProc As Procedure
Dim seq1 As Procedure
Dim cueprocedure As Procedure
Dim toetsenbordprocedure As Procedure
Dim sequentieprocedure As Procedure
Dim fixatieprocedure As Procedure
Dim responsprocedure As Procedure
Dim feedbackprocedure As Procedure
Dim cuelist2 As Procedure
Dim nogoprocedure As Procedure
Dim fixprocedure As Procedure
Dim Instructie As TextDisplay
Dim InstructieEchoClients As EchoClientCollection
Dim Einde As TextDisplay
Dim Fback As TextDisplay
Dim Fback2 As TextDisplay
Dim Pauze As TextDisplay
Dim Nog3sec As TextDisplay
Dim Nog2sec As TextDisplay
Dim Nog1sec As TextDisplay
Dim cue As TextDisplay
Dim toetsenbord As TextDisplay
Dim toetsenbordEchoClients As EchoClientCollection
Dim fixatie As TextDisplay
Dim fixatieEchoClients As EchoClientCollection
Dim nogo As TextDisplay
Dim nogoEchoClients As EchoClientCollection
Dim feedback As TextDisplay
Dim feedbackEchoClients As EchoClientCollection
Dim fout1 As TextDisplay
Dim fout2 As TextDisplay
Dim fout3 As TextDisplay
Dim fout4 As TextDisplay
Dim tevroeg As TextDisplay
Dim wacht As TextDisplay
Dim wachtEchoClients As EchoClientCollection
Dim fout As TextDisplay
Dim fout5 As TextDisplay
Dim fout6 As TextDisplay
Dim go As TextDisplay
Dim goed As TextDisplay

'--------------------------------------------------------------------------
' Package Declare Script
'--------------------------------------------------------------------------

'--------------------------------------------------------------------------
' User Script - BEGIN
'--------------------------------------------------------------------------
'voor de feedback
Dim score1 As Integer
Dim score2 As Integer
Dim reactietijd As Summation
Dim fouten As Integer
Dim f1 As Integer
Dim f2 As Integer
Dim f3 As Integer
Dim f4 As Integer
Dim f5 As Integer
Dim f6 As Integer

'voor het tekenen
Dim d As Integer
Dim currentposition As Integer
Dim fillcolor As String
Dim cnvs As Canvas
Dim i As Integer 
Dim a As Integer
Dim b As Integer
Dim p As Integer

'aantallen aangeven
Dim AantalKerenPerW As Integer
Dim AantalLoops As Integer
Dim h As Integer
Dim w As Integer
Dim r As Integer
Dim match As Boolean 
Dim q As Integer

'voor het tellen van aantal keren sequentie
Dim h1Loop As Integer
Dim h2Loop As Integer
Dim h3Loop As Integer
Dim h4Loop As Integer
Dim h5Loop As Integer
Dim h6Loop As Integer
Dim h7Loop As Integer
Dim h8Loop As Integer
Dim h9Loop As Integer
Dim h10Loop As Integer
Dim h11Loop As Integer
Dim h12Loop As Integer
Dim h13Loop As Integer
Dim h14Loop As Integer
Dim h15Loop As Integer
Dim h16Loop As Integer
Dim h17Loop As Integer
Dim h18Loop As Integer
Dim h19Loop As Integer
Dim h20Loop As Integer
Dim h21Loop As Integer
Dim h22Loop As Integer
Dim h23Loop As Integer
Dim h24Loop As Integer
Dim h25Loop As Integer
Dim h26Loop As Integer
Dim h27Loop As Integer
Dim h28Loop As Integer
Dim h29Loop As Integer
Dim h30Loop As Integer
Dim h31Loop As Integer
Dim h32Loop As Integer

'voor correct answer
Dim ca As String

'sessienummer
Dim sessionnr As Integer

'Declare constants
Const SIGNAL_PORT= 888 'Base address of the parallel port

'--------------------------------------------------------------------------
' User Script - END
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Package Global Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Implementation
'--------------------------------------------------------------------------
Sub SessionProc_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine1 BEGIN <InLine1>
	'''''''''''''''''''''''''''''''''''''''''''''
	
MVNudpCommands.Writestring "<AddMarkerReq Text =""28""/>"
'writeport &HE010, 0
' Set output signal for ImageDisplay.
instructie.OnsetSignalPort = &HE010
instructie.OnsetSignalData = 28 'Start Experiment
instructie.OnsetSignalEnabled = True

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine1 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	Instructie.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		InstructieEchoClients.RemoveAll
		Instructie.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(Instructie.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	Instructie.Run
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label4 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label4:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label4Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label4Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label4 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - setvariabelen BEGIN <setvariabelen>
	'''''''''''''''''''''''''''''''''''''''''''''
	MVNudpCommands.Writestring "<AddMarkerReq Text=""29""/>"
'writeport &HE010, 0
'writeport &HE010, 29 'Set variables.

'These variables give the feedback to the participant
Set reactietijd = New summation
fouten = 0

'd determines which square is to be colored yellow
d=1

'These variables determine how often each sequence has to be shown in each block 
AantalLoops = 40
AantalKerenPerW = AantalLoops / 2 '24/4 =6 presents

h1Loop = 0
h2Loop = 0



'These variables set the line thickness, line color and fill color for the drawing
Set cnvs = ebDisplay.Canvas
cnvs.PenWidth = 3
cnvs.PenColor = CColor("silver")
cnvs.FillColor = CColor ("black")
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - setvariabelen END
	'''''''''''''''''''''''''''''''''''''''''''''
	
		BlockList1.Run c
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine5 BEGIN <InLine5>
	'''''''''''''''''''''''''''''''''''''''''''''
	'zet de waarden voor feedback
c.SetAttrib "score2", CInt(reactietijd.mean)
c.SetAttrib "score1", (fouten)

' het aantal keren dat BlockList1 doorlopen moet worden
q = q + 1 

'voor sessie 1-4 wordt blocklist1 2x doorlopen
'voor sessies boven de 4 wordt blocklist1 1x doorlopen

'for session 1-4 blocklist1 is completed twice
'For sessions above 4, blocklist1 is run through 1x

If sessionnr < 10 Then
	If q = 2 Then GoTo Label2
Else 
	If q = 1 Then GoTo Label2
End If
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine5 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	Fback.Text = "Your average reaction time was " &_ 
				c.GetAttrib("score2") &_ 
				" ms \nand you made " &_ 
				c.GetAttrib("score1") &_ 
				" mistakes.\n\n"
	
	Fback.Run
	
	
	Pauze.Run
	
	
	Nog3sec.Run
	
	
	Nog2sec.Run
	
	
	Nog1sec.Run
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine8 BEGIN <InLine8>
	'''''''''''''''''''''''''''''''''''''''''''''
	'opnieuw naar blocklist1
GoTo Label4

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine8 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label2 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label2:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label2Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label2Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label2 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	Fback2.Text = "Your average reaction time was " &_ 
				c.GetAttrib("score2") &_ 
				" ms \nand you made " &_ 
				c.GetAttrib("score1") &_ 
				" mistakes.\n\n"
	
	Fback2.Run
	
	
	Einde.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	Instructie.EndOfProcedure

	Fback.EndOfProcedure

	Pauze.EndOfProcedure

	Nog3sec.EndOfProcedure

	Nog2sec.EndOfProcedure

	Nog1sec.EndOfProcedure

	Fback2.EndOfProcedure

	Einde.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub seq1_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Cuelist1.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub cueprocedure_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - tekencues BEGIN <tekencues>
	'''''''''''''''''''''''''''''''''''''''''''''
	Fillcolor = "255,255,0"
'door h wordt de sequenties van links of rechts geselecteerd - h selects the sequences from the left or right
'door w wordt sequentie 1 of 2 geselecteerd - sequence 1 or 2 is selected by w
'b geeft aan welk vierkantje een kleur krijgt - b indicates which square is given a color

'Here we are going to just pick 4 the 1st four as they are then 2 sequences mirrored.

'Set A Sequence 1 (11)
If h = 11 And d = 1 Then b = "0"
If h = 11 And d = 2 Then b = "2"
If h = 11 And d = 3 Then b = "3"
If h = 11 And d = 4 Then b = "1"
If h = 11 And d = 5 Then b = "2"
If h = 11 And d = 6 Then b = "0"

'Set A Sequence 2 (12)
If h = 12 And d = 1 Then b = "1"
If h = 12 And d = 2 Then b = "0"
If h = 12 And d = 3 Then b = "2"
If h = 12 And d = 4 Then b = "0"
If h = 12 And d = 5 Then b = "1"
If h = 12 And d = 6 Then b = "3"

'Set A Sequence 3 (13)
'If h = 13 And d = 1 Then b = "2"
'If h = 13 And d = 2 Then b = "0"
'If h = 13 And d = 3 Then b = "3"
'If h = 13 And d = 4 Then b = "0"
'If h = 13 And d = 5 Then b = "1"
'If h = 13 And d = 6 Then b = "3"

'Set A Sequence 4 (14)
'If h = 14 And d = 1 Then b = "3"
'If h = 14 And d = 2 Then b = "1"
'If h = 14 And d = 3 Then b = "0"
'If h = 14 And d = 4 Then b = "1"
'If h = 14 And d = 5 Then b = "3"
'If h = 14 And d = 6 Then b = "2"

'Set B Sequence 1 (21)
'If h = 21 And d = 1 Then b = "1"
'If h = 21 And d = 2 Then b = "3"
'If h = 21 And d = 3 Then b = "0"
'If h = 21 And d = 4 Then b = "2"
'If h = 21 And d = 5 Then b = "3"
'If h = 21 And d = 6 Then b = "1"

'Set B Sequence 2 (22)
'If h = 22 And d = 1 Then b = "2"
'If h = 22 And d = 2 Then b = "1"
'If h = 22 And d = 3 Then b = "3"
'If h = 22 And d = 4 Then b = "1"
'If h = 22 And d = 5 Then b = "2"
'If h = 22 And d = 6 Then b = "0"

'Set B Sequence 3 (23)
'If h = 23 And d = 1 Then b = "3"
'If h = 23 And d = 2 Then b = "1"
'If h = 23 And d = 3 Then b = "3"
'If h = 23 And d = 4 Then b = "1"
'If h = 23 And d = 5 Then b = "2"
'If h = 23 And d = 6 Then b = "0"

'Set B Sequence 4 (24)
'If h = 24 And d = 1 Then b = "0"
'If h = 24 And d = 2 Then b = "2"
'If h = 24 And d = 3 Then b = "1"
'If h = 24 And d = 4 Then b = "2"
'If h = 24 And d = 5 Then b = "0"
'If h = 24 And d = 6 Then b = "3"

'Set C Sequence 1 (31)
'If h = 31 And d = 1 Then b = "2"
'If h = 31 And d = 2 Then b = "0"
'If h = 31 And d = 3 Then b = "1"
'If h = 31 And d = 4 Then b = "3"
'If h = 31 And d = 5 Then b = "0"
'If h = 31 And d = 6 Then b = "2"

'Set C Sequence 2 (32)
'If h = 32 And d = 1 Then b = "3"
'If h = 32 And d = 2 Then b = "2"
'If h = 32 And d = 3 Then b = "0"
'If h = 32 And d = 4 Then b = "2"
'If h = 32 And d = 5 Then b = "3"
'If h = 32 And d = 6 Then b = "1"

'Set C Sequence 3 (33)
'If h = 33 And d = 1 Then b = "0"
'If h = 33 And d = 2 Then b = "2"
'If h = 33 And d = 3 Then b = "1"
'If h = 33 And d = 4 Then b = "2"
'If h = 33 And d = 5 Then b = "3"
'If h = 33 And d = 6 Then b = "1"

'Set C Sequence 4 (34)
'If h = 34 And d = 1 Then b = "1"
'If h = 34 And d = 2 Then b = "3"
'If h = 34 And d = 3 Then b = "2"
'If h = 34 And d = 4 Then b = "3"
'If h = 34 And d = 5 Then b = "1"
'If h = 34 And d = 6 Then b = "0"

'Set D Sequence 1 (41)
'If h = 41 And d = 1 Then b = "3"
'If h = 41 And d = 2 Then b = "1"
'If h = 41 And d = 3 Then b = "0"
'If h = 41 And d = 4 Then b = "2"
'If h = 41 And d = 5 Then b = "0"
'If h = 41 And d = 6 Then b = "3"

'Set D Sequence 2 (42)
'If h = 42 And d = 1 Then b = "0"
'If h = 42 And d = 2 Then b = "3"
'If h = 42 And d = 3 Then b = "1"
'If h = 42 And d = 4 Then b = "3"
'If h = 42 And d = 5 Then b = "0"
'If h = 42 And d = 6 Then b = "2"

'Set D Sequence 3 (43)
'If h = 43 And d = 1 Then b = "1"
'If h = 43 And d = 2 Then b = "3"
'If h = 43 And d = 3 Then b = "2"
'If h = 43 And d = 4 Then b = "3"
'If h = 43 And d = 5 Then b = "0"
'If h = 43 And d = 6 Then b = "2"

'Set D Sequence 4 (44)
'If h = 44 And d = 1 Then b = "2"
'If h = 44 And d = 2 Then b = "0"
'If h = 44 And d = 3 Then b = "3"
'If h = 44 And d = 4 Then b = "0"
'If h = 44 And d = 5 Then b = "2"
'If h = 44 And d = 6 Then b = "1"

d= d + 1 
If d = 7 Then d = 1	

'4 vierkantjes tekenen waarvan 1 gekleurd - Draw 4 squares, 1 of which is colored
cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45

If b = 0 Then
cnvs.FillColor = CColor (Fillcolor)
cnvs.Rectangle 297, 165, 45, 45

ElseIf b = 1 Then
cnvs.FillColor = CColor (Fillcolor)
cnvs.Rectangle 297, 265, 45, 45

ElseIf b = 2 Then
cnvs.FillColor = CColor (Fillcolor)
cnvs.Rectangle 247, 215, 45, 45

ElseIf b = 3 Then
cnvs.FillColor = CColor (Fillcolor)
cnvs.Rectangle 347, 215, 45, 45
End If

'Stimulus presentation markers/ setting the port and then sending signal data on the time of onset
'writeport &HE010, 0
cue.OnsetSignalPort = &HE010
If b=0 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""5""/>"
ElseIf b=1 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""6""/>"
ElseIf b=2 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""7""/>"
ElseIf b=3 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""8""/>"
ElseIf b=5 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""9""/>"
ElseIf b=6 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""10""/>"
ElseIf b=7 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""11""/>"
ElseIf b=8 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""12""/>"
Else
	MVNudpCommands.Writestring "<AddMarkerReq Text =""13""/>"
End If

cue.OnsetSignalEnabled = True

c.SetAttrib "h", h
c.PushNewFrame
c.SetAttrib "sequentie", c.GetAttrib("h")
c.Log 
c.PopFrame
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - tekencues END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	cue.Run
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetDelay, cue.OnsetDelay
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetTime, cue.OnsetTime
	c.SetAttrib cue.Name & ebDot & ebLogNameDurationError, cue.DurationError
	c.SetAttrib cue.Name & ebDot & ebLogNameRTTime, cue.RTTime
	c.SetAttrib cue.Name & ebDot & ebLogNameACC, cue.ACC
	c.SetAttrib cue.Name & ebDot & ebLogNameRT, cue.RT
	c.SetAttrib cue.Name & ebDot & ebLogNameRESP, cue.RESP
	c.SetAttrib cue.Name & ebDot & ebLogNameCRESP, cue.CRESP
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetToOnsetTime, cue.OnsetToOnsetTime
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cue.EndOfProcedure

	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetDelay, cue.OnsetDelay
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetTime, cue.OnsetTime
	c.SetAttrib cue.Name & ebDot & ebLogNameDurationError, cue.DurationError
	c.SetAttrib cue.Name & ebDot & ebLogNameRTTime, cue.RTTime
	c.SetAttrib cue.Name & ebDot & ebLogNameACC, cue.ACC
	c.SetAttrib cue.Name & ebDot & ebLogNameRT, cue.RT
	c.SetAttrib cue.Name & ebDot & ebLogNameRESP, cue.RESP
	c.SetAttrib cue.Name & ebDot & ebLogNameCRESP, cue.CRESP
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetToOnsetTime, cue.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub toetsenbordprocedure_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - tekentoetsenbord BEGIN <tekentoetsenbord>
	'''''''''''''''''''''''''''''''''''''''''''''
	
'4 squares are drawn to show the keyboard positions.

'To state the positions.  Later the sequences will utilise these positions.  0 to 3 is left hand ASDF positions. 
'i stands for integer
'a is the is the position, seems there is specific formular for it. 

'0 to 3 is left hand positions asdf
'For i = 0 To 3
'a = 100+(i*50)
'cnvs.Rectangle a, 250, 40, 40
'Next i

'5 to 8 is right hand JKL: positions.
'For i = 5 To 8
'a = 100+(i*50)
'cnvs.Rectangle a, 250, 40, 40
'Next i


cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - tekentoetsenbord END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	toetsenbord.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		toetsenbordEchoClients.RemoveAll
		toetsenbord.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(toetsenbord.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	toetsenbord.Run
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetDelay, toetsenbord.OnsetDelay
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetTime, toetsenbord.OnsetTime
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameDurationError, toetsenbord.DurationError
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRTTime, toetsenbord.RTTime
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameACC, toetsenbord.ACC
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRT, toetsenbord.RT
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRESP, toetsenbord.RESP
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameCRESP, toetsenbord.CRESP
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetToOnsetTime, toetsenbord.OnsetToOnsetTime
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	toetsenbord.EndOfProcedure

	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetDelay, toetsenbord.OnsetDelay
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetTime, toetsenbord.OnsetTime
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameDurationError, toetsenbord.DurationError
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRTTime, toetsenbord.RTTime
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameACC, toetsenbord.ACC
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRT, toetsenbord.RT
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRESP, toetsenbord.RESP
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameCRESP, toetsenbord.CRESP
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetToOnsetTime, toetsenbord.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub sequentieprocedure_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - sequentiekeuze BEGIN <sequentiekeuze>
	'''''''''''''''''''''''''''''''''''''''''''''
	'h and w tell which sequece is to be displayed. There are 4 combinations of h and w. Each combination represents a
'sequence. Aantalkerenperw tells how often a sequence in to be showd. If a sequence has been shown the maximum
'amount of times, the code will continue witht the remaining sequence.
'not sure why this is only between 1 to 8, what about 9 to 16? Are those used for test set?  These are the sequences that are being pulled.
						'Because only 8 x 6 key press sequences were used?
Do
match = True
	h = random (11,22)  
	
If h=11 And h1Loop < aantalkerenperw Then match = False
If h=12 And h2Loop < aantalkerenperw Then match = False 
Loop Until match = False

'hier worden de getoonde sequenties opgeteld - here the sequences shown are added together to add a counter so that they r not repeated
If h=11 Then h1Loop = h1loop + 1
If h=12 Then h2Loop = h2loop + 1

'This sends a marker to EEG to signal the Sequence that is being used. 
writeport &HE010, 0
If h=11 Then MVNudpCommands.Writestring "<AddMarkerReq Text =""41""/>"
If h=12 Then MVNudpCommands.Writestring "<AddMarkerReq Text =""42""/>"

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - sequentiekeuze END
	'''''''''''''''''''''''''''''''''''''''''''''
	
		List2.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub fixatieprocedure_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label3 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label3:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label3Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label3Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label3 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - goofnogo BEGIN <goofnogo>
	'''''''''''''''''''''''''''''''''''''''''''''
	'8 vierkantjes worden getekend - 8 squares are drawn
cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - goofnogo END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	fixatie.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		fixatieEchoClients.RemoveAll
		fixatie.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(fixatie.Duration), CLng(ebDigit_8), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	fixatie.Run
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetDelay, fixatie.OnsetDelay
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetTime, fixatie.OnsetTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameDurationError, fixatie.DurationError
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRTTime, fixatie.RTTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameACC, fixatie.ACC
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRT, fixatie.RT
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRESP, fixatie.RESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameCRESP, fixatie.CRESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetToOnsetTime, fixatie.OnsetToOnsetTime
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedbackfixatie BEGIN <feedbackfixatie>
	'''''''''''''''''''''''''''''''''''''''''''''
	'geen respons is goed, dan geen feedback - no response is good, then no feedback
'als er wel een respons is dan tevroeg (unreferenced E-Objects runnen) - if there is a response then too early (run unreferenced E-Objects)
'en dan opnieuw het toetsenbord laten zien - and then show the keyboard again
If fixatie.Acc = 1 Then GoTo Label1
If fixatie.Acc = 0 Then tevroeg.run
If fixatie.Acc = 0 Then GoTo Label3

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedbackfixatie END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label1:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label1Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label1Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine4 BEGIN <InLine4>
	'''''''''''''''''''''''''''''''''''''''''''''
	'This closes the port.
MVNudpCommands.Writestring "<AddMarkerReq Text =""27""/>"
writeport &HE010, 0
' Set output signal for ImageDisplay.
go.OnsetSignalPort = &HE010
go.OnsetSignalData = 27 'GO
go.OnsetSignalEnabled = True
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine4 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	go.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixatie.EndOfProcedure

	go.EndOfProcedure

	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetDelay, fixatie.OnsetDelay
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetTime, fixatie.OnsetTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameDurationError, fixatie.DurationError
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRTTime, fixatie.RTTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameACC, fixatie.ACC
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRT, fixatie.RT
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRESP, fixatie.RESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameCRESP, fixatie.CRESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetToOnsetTime, fixatie.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub responsprocedure_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - geeftca BEGIN <geeftca>
	'''''''''''''''''''''''''''''''''''''''''''''
	'correct answer (ca) aangeven

'Set A Sequence 1 (11)
If h = 11 And d = 1 Then ca = "w"
If h = 11 And d = 2 Then ca = "a"
If h = 11 And d = 3 Then ca = "d"
If h = 11 And d = 4 Then ca = "s"
If h = 11 And d = 5 Then ca = "a"
If h = 11 And d = 6 Then ca = "w"

'Set A Sequence 2 (12)
If h = 12 And d = 1 Then ca = "s"
If h = 12 And d = 2 Then ca = "w"
If h = 12 And d = 3 Then ca = "a"
If h = 12 And d = 4 Then ca = "w"
If h = 12 And d = 5 Then ca = "s"
If h = 12 And d = 6 Then ca = "d"

'Set A Sequence 3 (13)
'If h = 13 And d = 1 Then ca = "a"
'If h = 13 And d = 2 Then ca = "w"
'If h = 13 And d = 3 Then ca = "d"
'If h = 13 And d = 4 Then ca = "w"
'If h = 13 And d = 5 Then ca = "s"
'If h = 13 And d = 6 Then ca = "d"

'Set A Sequence 4 (14)
'If h = 14 And d = 1 Then ca = "d"
'If h = 14 And d = 2 Then ca = "s"
'If h = 14 And d = 3 Then ca = "w"
'If h = 14 And d = 4 Then ca = "s"
'If h = 14 And d = 5 Then ca = "d"
'If h = 14 And d = 6 Then ca = "a"

'Set B Sequence 1 (21)
'If h = 21 And d = 1 Then ca = "s"
'If h = 21 And d = 2 Then ca = "d"
'If h = 21 And d = 3 Then ca = "w"
'If h = 21 And d = 4 Then ca = "a"
'If h = 21 And d = 5 Then ca = "d"
'If h = 21 And d = 6 Then ca = "s"

'Set B Sequence 2 (22)
'If h = 22 And d = 1 Then ca = "a"
'If h = 22 And d = 2 Then ca = "s"
'If h = 22 And d = 3 Then ca = "d"
'If h = 22 And d = 4 Then ca = "s"
'If h = 22 And d = 5 Then ca = "a"
'If h = 22 And d = 6 Then ca = "w"

'Set B Sequence 3 (23)
'If h = 23 And d = 1 Then ca = "d"
'If h = 23 And d = 2 Then ca = "s"
'If h = 23 And d = 3 Then ca = "w"
'If h = 23 And d = 4 Then ca = "s"
'If h = 23 And d = 5 Then ca = "a"
'If h = 23 And d = 6 Then ca = "w"

'Set B Sequence 4 (24)
'If h = 24 And d = 1 Then ca = "w"
'If h = 24 And d = 2 Then ca = "a"
'If h = 24 And d = 3 Then ca = "s"
'If h = 24 And d = 4 Then ca = "a"
'If h = 24 And d = 5 Then ca = "w"
'If h = 24 And d = 6 Then ca = "d"

'Set C Sequence 1 (31)
'If h = 31 And d = 1 Then ca = "a"
'If h = 31 And d = 2 Then ca = "w"
'If h = 31 And d = 3 Then ca = "s"
'If h = 31 And d = 4 Then ca = "d"
'If h = 31 And d = 5 Then ca = "w"
'If h = 31 And d = 6 Then ca = "a"

'Set C Sequence 2 (32)
'If h = 32 And d = 1 Then ca = "d"
'If h = 32 And d = 2 Then ca = "a"
'If h = 32 And d = 3 Then ca = "w"
'If h = 32 And d = 4 Then ca = "a"
'If h = 32 And d = 5 Then ca = "d"
'If h = 32 And d = 6 Then ca = "s"

'Set C Sequence 3 (33)
'If h = 33 And d = 1 Then ca = "w"
'If h = 33 And d = 2 Then ca = "a"
'If h = 33 And d = 3 Then ca = "s"
'If h = 33 And d = 4 Then ca = "a"
'If h = 33 And d = 5 Then ca = "d"
'If h = 33 And d = 6 Then ca = "s"

'Set C Sequence 4 (34)
'If h = 34 And d = 1 Then ca = "s"
'If h = 34 And d = 2 Then ca = "d"
'If h = 34 And d = 3 Then ca = "a"
'If h = 34 And d = 4 Then ca = "d"
'If h = 34 And d = 5 Then ca = "s"
'If h = 34 And d = 6 Then ca = "w"

'Set D Sequence 1 (41)
'If h = 41 And d = 1 Then ca = "d"
'If h = 41 And d = 2 Then ca = "s"
'If h = 41 And d = 3 Then ca = "w"
'If h = 41 And d = 4 Then ca = "a"
'If h = 41 And d = 5 Then ca = "w"
'If h = 41 And d = 6 Then ca = "d"

'Set D Sequence 2 (42)
'If h = 42 And d = 1 Then ca = "w"
'If h = 42 And d = 2 Then ca = "d"
'If h = 42 And d = 3 Then ca = "s"
'If h = 42 And d = 4 Then ca = "d"
'If h = 42 And d = 5 Then ca = "w"
'If h = 42 And d = 6 Then ca = "a"

'Set D Sequence 3 (43)
'If h = 43 And d = 1 Then ca = "s"
'If h = 43 And d = 2 Then ca = "d"
'If h = 43 And d = 3 Then ca = "a"
'If h = 43 And d = 4 Then ca = "d"
'If h = 43 And d = 5 Then ca = "w"
'If h = 43 And d = 6 Then ca = "a"

'Set D Sequence 4 (44)
'If h = 44 And d = 1 Then b = "a"
'If h = 44 And d = 2 Then b = "w"
'If h = 44 And d = 3 Then b = "d"
'If h = 44 And d = 4 Then b = "w"
'If h = 44 And d = 5 Then b = "a"
'If h = 44 And d = 6 Then b = "s"

d= d + 1 
If d = 7 Then d = 1	

c.SetAttrib "correctanswer", ca	

'8 vierkantjes worden getekend - 4 Squares drawn
cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45

c.SetAttrib "h", h
c.PushNewFrame
c.SetAttrib "sequentie", c.GetAttrib("h")
c.Log 
c.PopFrame

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - geeftca END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - resetbits BEGIN <resetbits>
	'''''''''''''''''''''''''''''''''''''''''''''
	'reset the event marker
writeport &HE010, 0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - resetbits END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	feedback.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		feedbackEchoClients.RemoveAll
		feedback.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, c.GetAttrib(ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_s & ebLCase_w & ebLCase_e & ebLCase_r), CLng(feedback.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	feedback.Run
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetDelay, feedback.OnsetDelay
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetTime, feedback.OnsetTime
	c.SetAttrib feedback.Name & ebDot & ebLogNameDurationError, feedback.DurationError
	c.SetAttrib feedback.Name & ebDot & ebLogNameRTTime, feedback.RTTime
	c.SetAttrib feedback.Name & ebDot & ebLogNameACC, feedback.ACC
	c.SetAttrib feedback.Name & ebDot & ebLogNameRT, feedback.RT
	c.SetAttrib feedback.Name & ebDot & ebLogNameRESP, feedback.RESP
	c.SetAttrib feedback.Name & ebDot & ebLogNameCRESP, feedback.CRESP
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetToOnsetTime, feedback.OnsetToOnsetTime
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedback1 BEGIN <feedback1>
	'''''''''''''''''''''''''''''''''''''''''''''
	'This send the event trigger to the EEG.

If feedback.RESP = "a" Then
	MVNudpCommands.Writestring "<AddMarkerReq Text =""14""/>"
	'WritePort &HE010, 14
ElseIf feedback.RESP = "s" Then
	MVNudpCommands.Writestring "<AddMarkerReq Text =""15""/>"
	'WritePort &HE010, 15
ElseIf feedback.RESP = "d" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""16""/>"
	'WritePort &HE010, 16
ElseIf feedback.RESP = "w" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""17""/>"
	'WritePort &HE010, 17
ElseIf feedback.RESP = "j" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""18""/>"
	'WritePort &HE010, 18
ElseIf feedback.RESP = "k" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""19""/>"
	'WritePort &HE010, 19
ElseIf feedback.RESP = "l" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""20""/>"
	'WritePort &HE010, 20
ElseIf feedback.RESP = "{;}" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""21""/>"
	'WritePort &HE010, 21
Else 
	MVNudpCommands.WriteString "<AddMarkerReq Text =""22""/>"
	'WritePort &HE010, 22 'Random response
End If

'fouten optellen en opslaan - add and store errors
If feedback.Acc = 0 Then fouten = fouten + 1
reactietijd.AddObservation CDbl (c.GetAttrib("feedback.rt"))

'aangeven welke toetsdruk fout was (1t/m6) - indicates which keypress was wrong
If feedback.Acc = 0 And d = 2 Then f1=1
If feedback.Acc = 0 And d = 3 Then f2=1
If feedback.Acc = 0 And d = 4 Then f3=1
If feedback.Acc = 0 And d = 5 Then f4=1
If feedback.Acc = 0 And d = 6 Then f5=1
If feedback.Acc = 0 And d = 1 Then f6=1
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedback1 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	feedback.EndOfProcedure

	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetDelay, feedback.OnsetDelay
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetTime, feedback.OnsetTime
	c.SetAttrib feedback.Name & ebDot & ebLogNameDurationError, feedback.DurationError
	c.SetAttrib feedback.Name & ebDot & ebLogNameRTTime, feedback.RTTime
	c.SetAttrib feedback.Name & ebDot & ebLogNameACC, feedback.ACC
	c.SetAttrib feedback.Name & ebDot & ebLogNameRT, feedback.RT
	c.SetAttrib feedback.Name & ebDot & ebLogNameRESP, feedback.RESP
	c.SetAttrib feedback.Name & ebDot & ebLogNameCRESP, feedback.CRESP
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetToOnsetTime, feedback.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub feedbackprocedure_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedback2 BEGIN <feedback2>
	'''''''''''''''''''''''''''''''''''''''''''''
	'in 10 % van de gevallen --> nogo (wanneer het fixatiekruis blauw is) - in 10% of cases -> nogo (when the fixation cross is blue)
'dan wacht (unreferenced E-Objects) runnen - Then wait (unreferenced E-Objects) To run
'anders feedback geven op de responses - give feedback on the responses otherwise

If f1 = 1 Then fout1.run
If f2 = 1 Then fout2.run
If f3 = 1 Then fout3.run
If f4 = 1 Then fout4.run
If f5 = 1 Then fout5.run
If f6 = 1 Then fout6.run
If f1=0 And f2=0 And f3=0 And f4=0 And f5=0 And f6=0 Then goed.run

'write EEG port. 
writeport &HE010, 0
If f1=1 Or f2=1 Or f3=1 Or f4=1 Or f5=1 Or f6=1 Then 
	MVNudpCommands.WriteString "<AddMarkerReq Text =""25""/>"
	MVNudpCommands.WriteString "<AddMarkerReq Text =""30""/>"
	'writeport &HE010, 25 'Error response
Else 
	MVNudpCommands.WriteString "<AddMarkerReq Text =""26""/>"
	MVNudpCommands.WriteString "<AddMarkerReq Text =""30""/>"
	'writeport &HE010, 26 'Good response
End If


'fouten weer op nul zetten - reset errors to zero
f1 = 0
f2 = 0
f3 = 0
f4 = 0
f5 = 0
f6 = 0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedback2 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub cuelist2_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		List1.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub nogoprocedure_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine3 BEGIN <InLine3>
	'''''''''''''''''''''''''''''''''''''''''''''
	'Start with an empty port to send trigger to EEG.

writeport &HE010, 0 
h = random (11,12) '

If h=11 Then MVNudpCommands.WriteString "<AddMarkerReq Text =""1""/>" 
'writeport &HE010, 1
If h=12 Then MVNudpCommands.WriteString "<AddMarkerReq Text =""2""/>"
'writeport &HE010, 2
'If h=3 Then writeport &HE010, 3
'If h=4 Then writeport &HE010, 4 
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine3 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
		List3.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub fixprocedure_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label3 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label3:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label3Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label3Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label3 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - goofnogo BEGIN <goofnogo>
	'''''''''''''''''''''''''''''''''''''''''''''
	'8 vierkantjes worden getekend - 8 squares are drawn
cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - goofnogo END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	fixatie.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		fixatieEchoClients.RemoveAll
		fixatie.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(fixatie.Duration), CLng(ebDigit_8), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	fixatie.Run
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetDelay, fixatie.OnsetDelay
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetTime, fixatie.OnsetTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameDurationError, fixatie.DurationError
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRTTime, fixatie.RTTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameACC, fixatie.ACC
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRT, fixatie.RT
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRESP, fixatie.RESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameCRESP, fixatie.CRESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetToOnsetTime, fixatie.OnsetToOnsetTime
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedbackfixatie BEGIN <feedbackfixatie>
	'''''''''''''''''''''''''''''''''''''''''''''
	'geen respons is goed, dan geen feedback - no response is good, then no feedback
'als er wel een respons is dan tevroeg (unreferenced E-Objects runnen) - if there is a response then too early (run unreferenced E-Objects)
'en dan opnieuw het toetsenbord laten zien - and then show the keyboard again
If fixatie.Acc = 1 Then GoTo Label1
If fixatie.Acc = 0 Then tevroeg.run
If fixatie.Acc = 0 Then GoTo Label3

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedbackfixatie END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label1:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label1Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label1Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine6 BEGIN <InLine6>
	'''''''''''''''''''''''''''''''''''''''''''''
	MVNudpCommands.WriteString "<AddMarkerReq Text =""24""/>"
writeport &HE010, 0
' Set output signal for ImageDisplay.
nogo.OnsetSignalPort = &HE010
nogo.OnsetSignalData = 24 ' Before NoGo
nogo.OnsetSignalEnabled = True



	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine6 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	nogo.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		nogoEchoClients.RemoveAll
		nogo.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(nogo.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	nogo.Run
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine2 BEGIN <InLine2>
	'''''''''''''''''''''''''''''''''''''''''''''
	'If they pressed something during the NoGo then 23 is triggered.

writeport &HE010, 0
If nogo.Acc = 0 Then MVNudpCommands.WriteString "<AddMarkerReq Text =""23""/>"
'writeport &HE010, 23 'pressed during no go.
If nogo.Acc = 1 Then GoTo Label8
If nogo.Acc = 0 Then fout.run
If nogo.Acc = 0 Then fouten = fouten + 6  'Not sure about this line.
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine2 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label8 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label8:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label8Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label8Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label8 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixatie.EndOfProcedure

	nogo.EndOfProcedure

	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetDelay, fixatie.OnsetDelay
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetTime, fixatie.OnsetTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameDurationError, fixatie.DurationError
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRTTime, fixatie.RTTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameACC, fixatie.ACC
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRT, fixatie.RT
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRESP, fixatie.RESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameCRESP, fixatie.CRESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetToOnsetTime, fixatie.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub



'--------------------------------------------------------------------------
' InitDevices
'
'--------------------------------------------------------------------------
Sub InitDevices(c As Context)


	Set ebSound = New SoundDevice
	ebSound.Name = ebLCase_e & ebLCase_b & ebUCase_S & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d

	Dim ebSoundSoundDeviceInfo As SoundDeviceInfo
	ebSoundSoundDeviceInfo.API = ebSoundApiDirectSound
	ebSoundSoundDeviceInfo.DeviceIndex = 1
	ebSoundSoundDeviceInfo.Channels = 0
	ebSoundSoundDeviceInfo.SamplesPerSecond = 0
	ebSoundSoundDeviceInfo.BitsPerSample = 0
	ebSoundSoundDeviceInfo.DeviceReserved1 = 0
	ebSoundSoundDeviceInfo.DeviceReserved2 = 0
	ebSoundSoundDeviceInfo.DeviceReserved3 = 0
	ebSoundSoundDeviceInfo.DeviceReserved4 = 0
	ebSoundSoundDeviceInfo.DeviceReservedA = ebEmptyText
	ebSoundSoundDeviceInfo.DeviceReservedB = ebEmptyText
	ebSoundSoundDeviceInfo.DeviceReservedC = ebEmptyText
	ebSoundSoundDeviceInfo.DeviceReservedD = ebEmptyText

	'Load values from context if they exist
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_A & ebUCase_P & ebUCase_I) Then ebSoundSoundDeviceInfo.API = c.GetAttrib(ebSound.Name & ebDot & ebUCase_A & ebUCase_P & ebUCase_I)
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then ebSoundSoundDeviceInfo.DeviceIndex = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_C & ebLCase_h & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_e & ebLCase_l & ebLCase_s) Then ebSoundSoundDeviceInfo.Channels = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_C & ebLCase_h & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_e & ebLCase_l & ebLCase_s))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d) Then ebSoundSoundDeviceInfo.SamplesPerSecond = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_B & ebLCase_i & ebLCase_t & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e) Then ebSoundSoundDeviceInfo.BitsPerSample = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_B & ebLCase_i & ebLCase_t & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_1) Then ebSoundSoundDeviceInfo.DeviceReserved1 = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_1))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_2) Then ebSoundSoundDeviceInfo.DeviceReserved2 = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_2))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_3) Then ebSoundSoundDeviceInfo.DeviceReserved3 = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_3))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_4) Then ebSoundSoundDeviceInfo.DeviceReserved4 = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_4))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_A) Then ebSoundSoundDeviceInfo.DeviceReservedA = c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_A)
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_B) Then ebSoundSoundDeviceInfo.DeviceReservedB = c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_B)
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_C) Then ebSoundSoundDeviceInfo.DeviceReservedC = c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_C)
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_D) Then ebSoundSoundDeviceInfo.DeviceReservedD = c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_D)
	
	'Open the device, unless the context values indicate otherwise
	Dim ebSoundOpen As Boolean
	ebSoundOpen = True
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then ebSoundOpen = CLogical(c.GetAttrib(ebSound.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If ebSoundOpen = True Then
		ebSound.Open ebSoundSoundDeviceInfo
#If RUNTIME_VERSION_PERSIST >= 201 Then
		ebSound.RTAdjustment = 0
		If c.AttribExists(ebSound.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then ebSound.RTAdjustment = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If
	End If

	Set Keyboard = New KeyboardDevice
	Keyboard.Name = ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_b & ebLCase_o & ebLCase_a & ebLCase_r & ebLCase_d


	Dim KeyboardKeyboardDeviceInfo as KeyboardDeviceInfo
	KeyboardKeyboardDeviceInfo.CollectionMode = ebPressesOnly
	KeyboardKeyboardDeviceInfo.CapsLock = ebCapsLockOff
	KeyboardKeyboardDeviceInfo.NumLock = ebNumLockOn
	'Load values from context if they exist
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then KeyboardKeyboardDeviceInfo.CollectionMode = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_C & ebLCase_a & ebLCase_p & ebLCase_s & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k) Then KeyboardKeyboardDeviceInfo.CapsLock = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_C & ebLCase_a & ebLCase_p & ebLCase_s & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k) Then KeyboardKeyboardDeviceInfo.NumLock = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e) Then KeyboardKeyboardDeviceInfo.EmulateDeviceName = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e)
	
	'Open the device, unless the context values indicate otherwise
	Dim KeyboardOpen As Boolean
	KeyboardOpen = True
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then KeyboardOpen = CLogical(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If KeyboardOpen = True Then
		Keyboard.Open KeyboardKeyboardDeviceInfo
#If RUNTIME_VERSION_PERSIST >= 201 Then
		Keyboard.RTAdjustment = 0
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Keyboard.RTAdjustment = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If
	End If

	Set Mouse = New MouseDevice
	Mouse.Name = ebUCase_M & ebLCase_o & ebLCase_u & ebLCase_s & ebLCase_e


	Dim MouseMouseDeviceInfo as MouseDeviceInfo
	MouseMouseDeviceInfo.OpenMode = ebMouseOpenModeDirect
	MouseMouseDeviceInfo.CollectionMode = ebPressesOnly
	MouseMouseDeviceInfo.ShowCursor = False
	'Load values from context if they exist
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then MouseMouseDeviceInfo.OpenMode = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then MouseMouseDeviceInfo.CollectionMode = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_C & ebLCase_u & ebLCase_r & ebLCase_s & ebLCase_o & ebLCase_r) Then MouseMouseDeviceInfo.ShowCursor = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_C & ebLCase_u & ebLCase_r & ebLCase_s & ebLCase_o & ebLCase_r))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e) Then MouseMouseDeviceInfo.EmulateDeviceName = c.GetAttrib(Mouse.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e)
	
	'Open the device, unless the context values indicate otherwise
	Dim MouseOpen As Boolean
	MouseOpen = True
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then MouseOpen = CLogical(c.GetAttrib(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If MouseOpen = True Then
		Mouse.Open MouseMouseDeviceInfo
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.SystemAbortWatchSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.ConditionalExitSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.UserBreakSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
	#If RUNTIME_VERSION_PERSIST >= 201 Then
		Mouse.RTAdjustment = 0
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Mouse.RTAdjustment = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If

	End If

	Set ebDisplay = New DisplayDevice
	ebDisplay.Name = ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y

	Dim ebDisplayDisplayDeviceInfo As DisplayDeviceInfo
	ebDisplayDisplayDeviceInfo.XRes = 640
	ebDisplayDisplayDeviceInfo.YRes = 480
	ebDisplayDisplayDeviceInfo.ColorDepth = 32
	ebDisplayDisplayDeviceInfo.DisplayIndex = 1
	ebDisplayDisplayDeviceInfo.UseDesktopSettings = False
	ebDisplayDisplayDeviceInfo.DefaultColor = Color.White
	ebDisplayDisplayDeviceInfo.RefreshRateRequested = 0
	ebDisplayDisplayDeviceInfo.NumPages = 0
	
	'Load values from context if they exist
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_X & ebUCase_R & ebLCase_e & ebLCase_s) Then ebDisplayDisplayDeviceInfo.XRes = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_X & ebUCase_R & ebLCase_e & ebLCase_s))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_Y & ebUCase_R & ebLCase_e & ebLCase_s) Then ebDisplayDisplayDeviceInfo.YRes = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_Y & ebUCase_R & ebLCase_e & ebLCase_s))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r & ebUCase_D & ebLCase_e & ebLCase_p & ebLCase_t & ebLCase_h) Then ebDisplayDisplayDeviceInfo.ColorDepth = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r & ebUCase_D & ebLCase_e & ebLCase_p & ebLCase_t & ebLCase_h))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then ebDisplayDisplayDeviceInfo.DisplayIndex = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r) Then ebDisplayDisplayDeviceInfo.DefaultColor = CColor(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d) Then ebDisplayDisplayDeviceInfo.RefreshRateRequested = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_P & ebLCase_a & ebLCase_g & ebLCase_e & ebLCase_s) Then ebDisplayDisplayDeviceInfo.NumPages = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_P & ebLCase_a & ebLCase_g & ebLCase_e & ebLCase_s))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_s & ebLCase_k & ebLCase_t & ebLCase_o & ebLCase_p & ebUCase_S & ebLCase_e & ebLCase_t & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s) Then ebDisplayDisplayDeviceInfo.UseDesktopSettings = CLogical(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_s & ebLCase_k & ebLCase_t & ebLCase_o & ebLCase_p & ebUCase_S & ebLCase_e & ebLCase_t & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s))
	
	'Open the device, unless the context values indicate otherwise
	Dim ebDisplayOpen As Boolean
	ebDisplayOpen = True
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then ebDisplayOpen = CLogical(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If ebDisplayOpen = True Then
		ebDisplay.Open ebDisplayDisplayDeviceInfo
		ebDisplay.RefreshAlignment = ebDigit_0 & ebPercent
		If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_A & ebLCase_l & ebLCase_i & ebLCase_g & ebLCase_n & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then ebDisplay.RefreshAlignment = c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_A & ebLCase_l & ebLCase_i & ebLCase_g & ebLCase_n & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t)
	#If RUNTIME_VERSION_PERSIST >= 201 Then
		ebDisplay.RTAdjustment = 0
		If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then ebDisplay.RTAdjustment = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If
End If

	'Enable flipping, if requested
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_F & ebLCase_l & ebLCase_i & ebLCase_p & ebLCase_p & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d) Then
		ebDisplay.FlippingEnabled = CLogical(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_F & ebLCase_l & ebLCase_i & ebLCase_p & ebLCase_p & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d))
	Else
		ebDisplay.FlippingEnabled = True
	End If

	Set MVNudpCommands = New SocketDevice
	MVNudpCommands.Name = "MVNudpCommands"

	Dim MVNudpCommandsSocketDeviceInfo As SocketDeviceInfo
	MVNudpCommandsSocketDeviceInfo.Server = "192.168.1.7"
	MVNudpCommandsSocketDeviceInfo.Port = 6004
	MVNudpCommandsSocketDeviceInfo.SocketType = ebProtocolUdp
	MVNudpCommandsSocketDeviceInfo.ByteOrdering = ebByteOrderingNative
	'Load values from context if they exist
	If c.AttribExists(MVNudpCommands.Name & ".Server") Then MVNudpCommandsSocketDeviceInfo.Server = c.GetAttrib(MVNudpCommands.Name & ".Server")
	If c.AttribExists(MVNudpCommands.Name & ".Port") Then MVNudpCommandsSocketDeviceInfo.Port = CLng(c.GetAttrib(MVNudpCommands.Name & ".Port"))
	If c.AttribExists(MVNudpCommands.Name & ".SocketType") Then MVNudpCommandsSocketDeviceInfo.SocketType = CLng(c.GetAttrib(MVNudpCommands.Name & ".SocketType"))
	If c.AttribExists(MVNudpCommands.Name & ".ByteOrdering") Then MVNudpCommandsSocketDeviceInfo.ByteOrdering = CLng(c.GetAttrib(MVNudpCommands.Name & ".ByteOrdering"))
	
	'Open the device, unless the context values indicate otherwise
	Dim MVNudpCommandsOpen As Boolean
	MVNudpCommandsOpen = True
	If c.AttribExists(MVNudpCommands.Name & ".Open") Then MVNudpCommandsOpen = CLogical(c.GetAttrib(MVNudpCommands.Name & ".Open"))
	If MVNudpCommandsOpen = True Then
		MVNudpCommands.Open MVNudpCommandsSocketDeviceInfo

	End If

	'Init All Devices
	Rte.DeviceManager.Init

	' Log DisplayDevice(s) Refresh Rates
	If ebDisplayOpen = True Then
		c.SetAttrib ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e, Format$(ebDisplay.CalculatedRefreshRate, ebDigit_0 & ebDot & ebDigit_0 & ebDigit_0 & ebDigit_0)

		'Ensure that the refresh rate is acceptable
		If CLng(ebDisplay.CalculatedRefreshRate) = 0 Then
			'WARNING: RefreshRate of 0 (Zero) Detected.  Experiment will assume 60hz to continue. Data collection should NOT be used for time critical analysis.  Please ensure your display adapter is configured with the most recent and device specific driver.\n(Standard Display Adapter under Windows Vista or later is not compatible)
			Dim strebDisplayError As String
			strebDisplayError = ebUCase_W & ebUCase_A & ebUCase_R & ebUCase_N & ebUCase_I & ebUCase_N & ebUCase_G & ebColon & ebSpace & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebSpace & ebLCase_o & ebLCase_f & ebSpace & ebDigit_0 & ebSpace & ebParenOpen & ebUCase_Z & ebLCase_e & ebLCase_r & ebLCase_o & ebParenClose & ebSpace & ebUCase_D & ebLCase_e & ebLCase_t & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_e & ebLCase_d & ebDot & ebSpace & ebSpace & ebUCase_E & ebLCase_x & ebLCase_p & ebLCase_e & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_w & ebLCase_i & ebLCase_l & ebLCase_l & ebSpace & ebLCase_a & ebLCase_s & ebLCase_s & ebLCase_u & ebLCase_m & ebLCase_e & ebSpace & ebDigit_6 & ebDigit_0 & ebLCase_h & ebLCase_z & ebSpace & ebLCase_t & ebLCase_o & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_u & ebLCase_e & ebDot & ebSpace & ebUCase_D & ebLCase_a & ebLCase_t & ebLCase_a & ebSpace & ebLCase_c & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebSpace & ebLCase_s & ebLCase_h & ebLCase_o & ebLCase_u & ebLCase_l & ebLCase_d & ebSpace & ebUCase_N & ebUCase_O & ebUCase_T & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_u & ebLCase_s & ebLCase_e & ebLCase_d & ebSpace & ebLCase_f & ebLCase_o & ebLCase_r & ebSpace & ebLCase_t & ebLCase_i & ebLCase_m & ebLCase_e & ebSpace & ebLCase_c & ebLCase_r & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_a & ebLCase_l & ebSpace & ebLCase_a & ebLCase_n & ebLCase_a & ebLCase_l & ebLCase_y & ebLCase_s & ebLCase_i & ebLCase_s & ebDot & ebSpace & ebSpace & ebUCase_P & ebLCase_l & ebLCase_e & ebLCase_a & ebLCase_s & ebLCase_e & ebSpace & ebLCase_e & ebLCase_n & ebLCase_s & ebLCase_u & ebLCase_r & ebLCase_e & ebSpace & ebLCase_y & ebLCase_o & ebLCase_u & ebLCase_r & ebSpace & ebLCase_d & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebLCase_a & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_g & ebLCase_u & ebLCase_r & ebLCase_e & ebLCase_d & ebSpace & ebLCase_w & ebLCase_i & ebLCase_t & ebLCase_h & ebSpace & ebLCase_t & ebLCase_h & ebLCase_e & ebSpace & ebLCase_m & ebLCase_o & ebLCase_s & ebLCase_t & ebSpace & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_a & ebLCase_n & ebLCase_d & ebSpace & ebLCase_d & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebSpace & ebLCase_s & ebLCase_p & ebLCase_e & ebLCase_c & ebLCase_i & ebLCase_f & ebLCase_i & ebLCase_c & ebSpace & ebLCase_d & ebLCase_r & ebLCase_i & ebLCase_v & ebLCase_e & ebLCase_r & ebDot & ebLf & ebParenOpen & ebUCase_S & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_d & ebSpace & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebUCase_A & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_u & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_r & ebSpace & ebUCase_W & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_o & ebLCase_w & ebLCase_s & ebSpace & ebUCase_V & ebLCase_i & ebLCase_s & ebLCase_t & ebLCase_a & ebSpace & ebLCase_o & ebLCase_r & ebSpace & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_p & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_b & ebLCase_l & ebLCase_e & ebParenClose
			Debug.Print strebDisplayError
			c.SetAttrib ebUCase_A & ebUCase_W & ebLCase_a & ebLCase_r & ebLCase_n & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e, strebDisplayError
		End If

		'Determine RefreshRate range
		Dim dblebDisplayMinRefreshRate As Double
		Dim dblebDisplayMaxRefreshRate As Double
		dblebDisplayMinRefreshRate = 40
		dblebDisplayMaxRefreshRate = 201
		If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_M & ebLCase_i & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e) Then dblebDisplayMinRefreshRate = CDbl(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_M & ebLCase_i & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e))
		If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e) Then dblebDisplayMaxRefreshRate = CDbl(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e))

		'Ensure that the refresh rate is within range
		If ebDisplay.CalculatedRefreshRate < dblebDisplayMinRefreshRate Or ebDisplay.CalculatedRefreshRate > dblebDisplayMaxRefreshRate Then
			'Unable to obtain a valid refresh rate.\n\nPlease ensure your display adapter is configured with the most recent and device specific driver.\n(Standard Display Adapter under Windows Vista is not compatible)
			Rte.AbortExperiment -999, ebUCase_U & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebSpace & ebLCase_t & ebLCase_o & ebSpace & ebLCase_o & ebLCase_b & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n & ebSpace & ebLCase_a & ebSpace & ebLCase_v & ebLCase_a & ebLCase_l & ebLCase_i & ebLCase_d & ebSpace & ebLCase_r & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebSpace & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_e & ebDot & ebLf & ebLf & ebUCase_P & ebLCase_l & ebLCase_e & ebLCase_a & ebLCase_s & ebLCase_e & ebSpace & ebLCase_e & ebLCase_n & ebLCase_s & ebLCase_u & ebLCase_r & ebLCase_e & ebSpace & ebLCase_y & ebLCase_o & ebLCase_u & ebLCase_r & ebSpace & ebLCase_d & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebLCase_a & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_g & ebLCase_u & ebLCase_r & ebLCase_e & ebLCase_d & ebSpace & ebLCase_w & ebLCase_i & ebLCase_t & ebLCase_h & ebSpace & ebLCase_t & ebLCase_h & ebLCase_e & ebSpace & ebLCase_m & ebLCase_o & ebLCase_s & ebLCase_t & ebSpace & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_a & ebLCase_n & ebLCase_d & ebSpace & ebLCase_d & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebSpace & ebLCase_s & ebLCase_p & ebLCase_e & ebLCase_c & ebLCase_i & ebLCase_f & ebLCase_i & ebLCase_c & ebSpace & ebLCase_d & ebLCase_r & ebLCase_i & ebLCase_v & ebLCase_e & ebLCase_r & ebDot & ebLf & ebParenOpen & ebUCase_S & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_d & ebSpace & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebUCase_A & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_u & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_r & ebSpace & ebUCase_W & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_o & ebLCase_w & ebLCase_s & ebSpace & ebUCase_V & ebLCase_i & ebLCase_s & ebLCase_t & ebLCase_a & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_p & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_b & ebLCase_l & ebLCase_e & ebParenClose
		End If
	End If

End Sub



'--------------------------------------------------------------------------
' InitObjects
'
'--------------------------------------------------------------------------
Sub InitObjects(c As Context)

	Set BlockList1 = New List
	BlockList1.Name = ebUCase_B & ebLCase_l & ebLCase_o & ebLCase_c & ebLCase_k & ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1
	'{25B35E8F-A037-4D1A-8DAA-8D94DD28909D}
	BlockList1.Guid = CGuid(&H25B35E8F, &HA037, &H4D1A, &H8DAA, &H8D94DD28, &H909D)
	BlockList1.Tag = ebEmptyText

	'Initialization for BlockList1
	
	Set BlockList1.Order = New RandomOrder
	CRandomOrder(BlockList1.Order).NoRepeatAfterReset = False
	Set BlockList1.Deletion = NoDeletion
	BlockList1.ResetEveryRun = True

	BlockList1.LoadProperties

	Set BlockList1.TerminateCondition = Cycles(1)
	Set BlockList1.ResetCondition = Samples(26)
	BlockList1.Reset
	
	Set Cuelist1 = New List
	Cuelist1.Name = ebUCase_C & ebLCase_u & ebLCase_e & ebLCase_l & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1
	'{51067423-7AF0-4149-B1F9-264AD2D5EBAD}
	Cuelist1.Guid = CGuid(&H51067423, &H7AF0, &H4149, &HB1F9, &H264AD2D5, &HEBAD)
	Cuelist1.Tag = ebEmptyText

	'Initialization for Cuelist1
	
	Set Cuelist1.Order = New SequentialOrder
	Set Cuelist1.Deletion = NoDeletion
	Cuelist1.ResetEveryRun = False

	Cuelist1.LoadProperties

	Set Cuelist1.TerminateCondition = Cycles(1)
	Set Cuelist1.ResetCondition = Samples(2)
	Cuelist1.Reset
	
	Set List2 = New List
	List2.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_2
	'{2B89A205-4E50-487F-84F8-EB1267D66ACC}
	List2.Guid = CGuid(&H2B89A205, &H4E50, &H487F, &H84F8, &HEB1267D6, &H6ACC)
	List2.Tag = ebEmptyText

	'Initialization for List2
	
	Set List2.Order = New SequentialOrder
	Set List2.Deletion = NoDeletion
	List2.ResetEveryRun = False

	List2.LoadProperties

	Set List2.TerminateCondition = Cycles(1)
	Set List2.ResetCondition = Samples(14)
	List2.Reset
	
	Set List1 = New List
	List1.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1
	'{7BB5443C-ABB7-4198-9EF9-5E91D7D2DF8C}
	List1.Guid = CGuid(&H7BB5443C, &HABB7, &H4198, &H9EF9, &H5E91D7D2, &HDF8C)
	List1.Tag = ebEmptyText

	'Initialization for List1
	
	Set List1.Order = New SequentialOrder
	Set List1.Deletion = NoDeletion
	List1.ResetEveryRun = False

	List1.LoadProperties

	Set List1.TerminateCondition = Cycles(1)
	Set List1.ResetCondition = Samples(2)
	List1.Reset
	
	Set List3 = New List
	List3.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_3
	'{E310FCE8-165C-4027-8778-B68A247CB989}
	List3.Guid = CGuid(&HE310FCE8, &H165C, &H4027, &H8778, &HB68A247C, &HB989)
	List3.Tag = ebEmptyText

	'Initialization for List3
	
	Set List3.Order = New SequentialOrder
	Set List3.Deletion = NoDeletion
	List3.ResetEveryRun = False

	List3.LoadProperties

	Set List3.TerminateCondition = Cycles(1)
	Set List3.ResetCondition = Samples(7)
	List3.Reset
	
	Set SessionProc = New Procedure
	SessionProc.Name = ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c
	'{81B2063D-982D-44D5-B014-D629AE491DDD}
	SessionProc.Guid = CGuid(&H81B2063D, &H982D, &H44D5, &HB014, &HD629AE49, &H1DDD)
	SessionProc.Tag = ebEmptyText

	SessionProc.LoadProperties
	SessionProc.Subroutine = ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set seq1 = New Procedure
	seq1.Name = ebLCase_s & ebLCase_e & ebLCase_q & ebDigit_1
	'{58C3E7AF-BF3C-4961-B343-BF581EF38C7C}
	seq1.Guid = CGuid(&H58C3E7AF, &HBF3C, &H4961, &HB343, &HBF581EF3, &H8C7C)
	seq1.Tag = ebEmptyText

	seq1.LoadProperties
	seq1.Subroutine = ebLCase_s & ebLCase_e & ebLCase_q & ebDigit_1 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set cueprocedure = New Procedure
	cueprocedure.Name = ebLCase_c & ebLCase_u & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{996DC571-FDF8-4DEC-8417-8E22DAB57DBE}
	cueprocedure.Guid = CGuid(&H996DC571, &HFDF8, &H4DEC, &H8417, &H8E22DAB5, &H7DBE)
	cueprocedure.Tag = ebEmptyText

	cueprocedure.LoadProperties
	cueprocedure.Subroutine = ebLCase_c & ebLCase_u & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set toetsenbordprocedure = New Procedure
	toetsenbordprocedure.Name = ebLCase_t & ebLCase_o & ebLCase_e & ebLCase_t & ebLCase_s & ebLCase_e & ebLCase_n & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_d & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{9B91F813-2AC9-4275-8AA1-0CD8330FA106}
	toetsenbordprocedure.Guid = CGuid(&H9B91F813, &H2AC9, &H4275, &H8AA1, &H0CD8330F, &HA106)
	toetsenbordprocedure.Tag = ebEmptyText

	toetsenbordprocedure.LoadProperties
	toetsenbordprocedure.Subroutine = ebLCase_t & ebLCase_o & ebLCase_e & ebLCase_t & ebLCase_s & ebLCase_e & ebLCase_n & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_d & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set sequentieprocedure = New Procedure
	sequentieprocedure.Name = ebLCase_s & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_t & ebLCase_i & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{3D36F606-E1C8-4590-ACA2-ADA182BB74B6}
	sequentieprocedure.Guid = CGuid(&H3D36F606, &HE1C8, &H4590, &HACA2, &HADA182BB, &H74B6)
	sequentieprocedure.Tag = ebEmptyText

	sequentieprocedure.LoadProperties
	sequentieprocedure.Subroutine = ebLCase_s & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_t & ebLCase_i & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set fixatieprocedure = New Procedure
	fixatieprocedure.Name = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{40290268-473E-4655-ADB2-88C755387BA8}
	fixatieprocedure.Guid = CGuid(&H40290268, &H473E, &H4655, &HADB2, &H88C75538, &H7BA8)
	fixatieprocedure.Tag = ebEmptyText

	fixatieprocedure.LoadProperties
	fixatieprocedure.Subroutine = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set responsprocedure = New Procedure
	responsprocedure.Name = ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{416AB148-DDC4-48B1-989C-53F5791A13C1}
	responsprocedure.Guid = CGuid(&H416AB148, &HDDC4, &H48B1, &H989C, &H53F5791A, &H13C1)
	responsprocedure.Tag = ebEmptyText

	responsprocedure.LoadProperties
	responsprocedure.Subroutine = ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set feedbackprocedure = New Procedure
	feedbackprocedure.Name = ebLCase_f & ebLCase_e & ebLCase_e & ebLCase_d & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{B4A59D96-2CDC-4C3E-ADF2-31E26A53AF2E}
	feedbackprocedure.Guid = CGuid(&HB4A59D96, &H2CDC, &H4C3E, &HADF2, &H31E26A53, &HAF2E)
	feedbackprocedure.Tag = ebEmptyText

	feedbackprocedure.LoadProperties
	feedbackprocedure.Subroutine = ebLCase_f & ebLCase_e & ebLCase_e & ebLCase_d & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set cuelist2 = New Procedure
	cuelist2.Name = ebLCase_c & ebLCase_u & ebLCase_e & ebLCase_l & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_2
	'{C3DC067B-9C3E-4012-BE98-228470D54ACD}
	cuelist2.Guid = CGuid(&HC3DC067B, &H9C3E, &H4012, &HBE98, &H228470D5, &H4ACD)
	cuelist2.Tag = ebEmptyText

	cuelist2.LoadProperties
	cuelist2.Subroutine = ebLCase_c & ebLCase_u & ebLCase_e & ebLCase_l & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_2 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set nogoprocedure = New Procedure
	nogoprocedure.Name = ebLCase_n & ebLCase_o & ebLCase_g & ebLCase_o & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{ECF1A8EF-6DD8-4067-9651-7322529F02A9}
	nogoprocedure.Guid = CGuid(&HECF1A8EF, &H6DD8, &H4067, &H9651, &H7322529F, &H02A9)
	nogoprocedure.Tag = ebEmptyText

	nogoprocedure.LoadProperties
	nogoprocedure.Subroutine = ebLCase_n & ebLCase_o & ebLCase_g & ebLCase_o & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set fixprocedure = New Procedure
	fixprocedure.Name = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{CE1AC2AB-F703-4EEB-8FF8-2E1A5F873448}
	fixprocedure.Guid = CGuid(&HCE1AC2AB, &HF703, &H4EEB, &H8FF8, &H2E1A5F87, &H3448)
	fixprocedure.Tag = ebEmptyText

	fixprocedure.LoadProperties
	fixprocedure.Subroutine = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set Instructie = New TextDisplay
	Instructie.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_e
	'{3C36CC7D-4D51-4411-AE44-10D174D6CAE8}
	Instructie.Guid = CGuid(&H3C36CC7D, &H4D51, &H4411, &HAE44, &H10D174D6, &HCAE8)
	Instructie.Tag = ebEmptyText

	Set InstructieEchoClients = New EchoClientCollection

	Instructie.LoadProperties

	Set Einde = New TextDisplay
	Einde.Name = ebUCase_E & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_e
	'{D8D710EC-C49E-4980-8D50-D80DE0290EAA}
	Einde.Guid = CGuid(&HD8D710EC, &HC49E, &H4980, &H8D50, &HD80DE029, &H0EAA)
	Einde.Tag = ebEmptyText

	Einde.LoadProperties

	Set Fback = New TextDisplay
	Fback.Name = ebUCase_F & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k
	'{E7404B61-165A-4813-9AB0-928120EFE7A4}
	Fback.Guid = CGuid(&HE7404B61, &H165A, &H4813, &H9AB0, &H928120EF, &HE7A4)
	Fback.Tag = ebEmptyText

	Fback.LoadProperties

	Set Fback2 = New TextDisplay
	Fback2.Name = ebUCase_F & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k & ebDigit_2
	'{A5A1A643-63E8-4C8A-ADD8-BA40FA87706B}
	Fback2.Guid = CGuid(&HA5A1A643, &H63E8, &H4C8A, &HADD8, &HBA40FA87, &H706B)
	Fback2.Tag = ebEmptyText

	Fback2.LoadProperties

	Set Pauze = New TextDisplay
	Pauze.Name = ebUCase_P & ebLCase_a & ebLCase_u & ebLCase_z & ebLCase_e
	'{A4F30D2C-B6E4-45AC-A6BF-0213367B760A}
	Pauze.Guid = CGuid(&HA4F30D2C, &HB6E4, &H45AC, &HA6BF, &H0213367B, &H760A)
	Pauze.Tag = ebEmptyText

	Pauze.LoadProperties

	Set Nog3sec = New TextDisplay
	Nog3sec.Name = ebUCase_N & ebLCase_o & ebLCase_g & ebDigit_3 & ebLCase_s & ebLCase_e & ebLCase_c
	'{53D00F2A-6673-4867-BB08-52E0A4BBABB0}
	Nog3sec.Guid = CGuid(&H53D00F2A, &H6673, &H4867, &HBB08, &H52E0A4BB, &HABB0)
	Nog3sec.Tag = ebEmptyText

	Nog3sec.LoadProperties

	Set Nog2sec = New TextDisplay
	Nog2sec.Name = ebUCase_N & ebLCase_o & ebLCase_g & ebDigit_2 & ebLCase_s & ebLCase_e & ebLCase_c
	'{EB2B46BF-0B18-43BE-A344-57C08812BC63}
	Nog2sec.Guid = CGuid(&HEB2B46BF, &H0B18, &H43BE, &HA344, &H57C08812, &HBC63)
	Nog2sec.Tag = ebEmptyText

	Nog2sec.LoadProperties

	Set Nog1sec = New TextDisplay
	Nog1sec.Name = ebUCase_N & ebLCase_o & ebLCase_g & ebDigit_1 & ebLCase_s & ebLCase_e & ebLCase_c
	'{2B49C2D9-98B1-46A5-8094-A46E5C009698}
	Nog1sec.Guid = CGuid(&H2B49C2D9, &H98B1, &H46A5, &H8094, &HA46E5C00, &H9698)
	Nog1sec.Tag = ebEmptyText

	Nog1sec.LoadProperties

	Set cue = New TextDisplay
	cue.Name = ebLCase_c & ebLCase_u & ebLCase_e
	'{F76635D7-1890-4728-9520-199B731C331C}
	cue.Guid = CGuid(&HF76635D7, &H1890, &H4728, &H9520, &H199B731C, &H331C)
	cue.Tag = ebEmptyText

	cue.LoadProperties

	Set toetsenbord = New TextDisplay
	toetsenbord.Name = ebLCase_t & ebLCase_o & ebLCase_e & ebLCase_t & ebLCase_s & ebLCase_e & ebLCase_n & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_d
	'{35E7004C-6BBD-4758-A390-8E0D26792E10}
	toetsenbord.Guid = CGuid(&H35E7004C, &H6BBD, &H4758, &HA390, &H8E0D2679, &H2E10)
	toetsenbord.Tag = ebEmptyText

	Set toetsenbordEchoClients = New EchoClientCollection

	toetsenbord.LoadProperties

	Set fixatie = New TextDisplay
	fixatie.Name = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_e
	'{6118F081-A82B-4FE5-8D49-9EB592B7851D}
	fixatie.Guid = CGuid(&H6118F081, &HA82B, &H4FE5, &H8D49, &H9EB592B7, &H851D)
	fixatie.Tag = ebEmptyText

	Set fixatieEchoClients = New EchoClientCollection

	fixatie.LoadProperties

	Set nogo = New TextDisplay
	nogo.Name = ebLCase_n & ebLCase_o & ebLCase_g & ebLCase_o
	'{DD9BB38E-8D0F-4AAB-A7C1-1950792A0DF5}
	nogo.Guid = CGuid(&HDD9BB38E, &H8D0F, &H4AAB, &HA7C1, &H1950792A, &H0DF5)
	nogo.Tag = ebEmptyText

	Set nogoEchoClients = New EchoClientCollection

	nogo.LoadProperties

	Set feedback = New TextDisplay
	feedback.Name = ebLCase_f & ebLCase_e & ebLCase_e & ebLCase_d & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k
	'{2819602E-A690-4D4F-B7FD-3C1DA9E6858E}
	feedback.Guid = CGuid(&H2819602E, &HA690, &H4D4F, &HB7FD, &H3C1DA9E6, &H858E)
	feedback.Tag = ebEmptyText

	Set feedbackEchoClients = New EchoClientCollection

	feedback.LoadProperties

	Set fout1 = New TextDisplay
	fout1.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1
	'{ADF91188-234B-4C1A-A2FE-27DD2A7C294F}
	fout1.Guid = CGuid(&HADF91188, &H234B, &H4C1A, &HA2FE, &H27DD2A7C, &H294F)
	fout1.Tag = ebEmptyText

	fout1.LoadProperties

	Set fout2 = New TextDisplay
	fout2.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_2
	'{BB2DFCD1-D083-4BF7-B433-053E92D4B6ED}
	fout2.Guid = CGuid(&HBB2DFCD1, &HD083, &H4BF7, &HB433, &H053E92D4, &HB6ED)
	fout2.Tag = ebEmptyText

	fout2.LoadProperties

	Set fout3 = New TextDisplay
	fout3.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_3
	'{E433B91C-DAF7-4C83-8881-68305B9C59AF}
	fout3.Guid = CGuid(&HE433B91C, &HDAF7, &H4C83, &H8881, &H68305B9C, &H59AF)
	fout3.Tag = ebEmptyText

	fout3.LoadProperties

	Set fout4 = New TextDisplay
	fout4.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_4
	'{1BD2C3D1-8537-412F-A2FF-D376EA332CA7}
	fout4.Guid = CGuid(&H1BD2C3D1, &H8537, &H412F, &HA2FF, &HD376EA33, &H2CA7)
	fout4.Tag = ebEmptyText

	fout4.LoadProperties

	Set tevroeg = New TextDisplay
	tevroeg.Name = ebLCase_t & ebLCase_e & ebLCase_v & ebLCase_r & ebLCase_o & ebLCase_e & ebLCase_g
	'{C280E575-9CBF-4D0A-898F-8BB198A4AD2C}
	tevroeg.Guid = CGuid(&HC280E575, &H9CBF, &H4D0A, &H898F, &H8BB198A4, &HAD2C)
	tevroeg.Tag = ebEmptyText

	tevroeg.LoadProperties

	Set wacht = New TextDisplay
	wacht.Name = ebLCase_w & ebLCase_a & ebLCase_c & ebLCase_h & ebLCase_t
	'{B5603580-33F8-4B27-89C9-90E18ACB0C65}
	wacht.Guid = CGuid(&HB5603580, &H33F8, &H4B27, &H89C9, &H90E18ACB, &H0C65)
	wacht.Tag = ebEmptyText

	Set wachtEchoClients = New EchoClientCollection

	wacht.LoadProperties

	Set fout = New TextDisplay
	fout.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t
	'{3E4179B1-8772-4E87-8FFA-51C3F7D9F645}
	fout.Guid = CGuid(&H3E4179B1, &H8772, &H4E87, &H8FFA, &H51C3F7D9, &HF645)
	fout.Tag = ebEmptyText

	fout.LoadProperties

	Set fout5 = New TextDisplay
	fout5.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_5
	'{3AA7BFC7-2489-4EC8-9C0D-887E3C350028}
	fout5.Guid = CGuid(&H3AA7BFC7, &H2489, &H4EC8, &H9C0D, &H887E3C35, &H0028)
	fout5.Tag = ebEmptyText

	fout5.LoadProperties

	Set fout6 = New TextDisplay
	fout6.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_6
	'{E0872AAE-9CD5-4A92-92CA-1C862320182A}
	fout6.Guid = CGuid(&HE0872AAE, &H9CD5, &H4A92, &H92CA, &H1C862320, &H182A)
	fout6.Tag = ebEmptyText

	fout6.LoadProperties

	Set go = New TextDisplay
	go.Name = ebLCase_g & ebLCase_o
	'{E33FAF11-1015-46F7-A123-176076300010}
	go.Guid = CGuid(&HE33FAF11, &H1015, &H46F7, &HA123, &H17607630, &H0010)
	go.Tag = ebEmptyText

	go.LoadProperties

	Set goed = New TextDisplay
	goed.Name = ebLCase_g & ebLCase_o & ebLCase_e & ebLCase_d
	'{961C2EA0-BCD5-4F30-A24E-F5E9BA3D95B1}
	goed.Guid = CGuid(&H961C2EA0, &HBCD5, &H4F30, &HA24E, &HF5E9BA3D, &H95B1)
	goed.Tag = ebEmptyText

	goed.LoadProperties


End Sub


'--------------------------------------------------------------------------
' InitPackages
'
'--------------------------------------------------------------------------
Sub InitPackages(c As Context)

End Sub



'--------------------------------------------------------------------------
' InitGlobals
'
'--------------------------------------------------------------------------
Sub InitGlobals(c As Context)

End Sub



'--------------------------------------------------------------------------


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitGlobals
'--------------------------------------------------------------------------
Sub UnInitGlobals()
End Sub
'--------------------------------------------------------------------------
' UnInitDevices
'--------------------------------------------------------------------------
Sub UnInitDevices()

	'UnInit All Devices
	Rte.DeviceManager.UnInit
	ebSound.Close

	Keyboard.Close
	Set Keyboard = Nothing

	Mouse.Close
	Set Mouse = Nothing

	ebDisplay.Close
	Set ebDisplay = Nothing

	MVNudpCommands.Close
	Set MVNudpCommands = Nothing
End Sub


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitPackages
'--------------------------------------------------------------------------
Sub UnInitPackages()
End Sub


'--------------------------------------------------------------------------
' UnInitObjects
'
'--------------------------------------------------------------------------
Sub UnInitObjects()

	Set BlockList1 = Nothing

	Set Cuelist1 = Nothing

	Set List2 = Nothing

	Set List1 = Nothing

	Set List3 = Nothing

	Set SessionProc = Nothing

	Set seq1 = Nothing

	Set cueprocedure = Nothing

	Set toetsenbordprocedure = Nothing

	Set sequentieprocedure = Nothing

	Set fixatieprocedure = Nothing

	Set responsprocedure = Nothing

	Set feedbackprocedure = Nothing

	Set cuelist2 = Nothing

	Set nogoprocedure = Nothing

	Set fixprocedure = Nothing

	Set Instructie = Nothing

	Set InstructieEchoClients = Nothing

	Set Einde = Nothing

	Set Fback = Nothing

	Set Fback2 = Nothing

	Set Pauze = Nothing

	Set Nog3sec = Nothing

	Set Nog2sec = Nothing

	Set Nog1sec = Nothing

	Set cue = Nothing

	Set toetsenbord = Nothing

	Set toetsenbordEchoClients = Nothing

	Set fixatie = Nothing

	Set fixatieEchoClients = Nothing

	Set nogo = Nothing

	Set nogoEchoClients = Nothing

	Set feedback = Nothing

	Set feedbackEchoClients = Nothing

	Set fout1 = Nothing

	Set fout2 = Nothing

	Set fout3 = Nothing

	Set fout4 = Nothing

	Set tevroeg = Nothing

	Set wacht = Nothing

	Set wachtEchoClients = Nothing

	Set fout = Nothing

	Set fout5 = Nothing

	Set fout6 = Nothing

	Set go = Nothing

	Set goed = Nothing


End Sub


'--------------------------------------------------------------------------
' Main
'
'--------------------------------------------------------------------------
Sub Main()

	' Create and initialize the default context, data file,
	' and provide global access to the context.
	Dim c As Context
	Set c = New Context
	c.Name = "ebContext"
	Set c.DataFile = New DataFile
	c.PushNewFrame
	Set ebContext = c

	' Set the log level names
	c.SetLogLevelName 1, "Session"
	c.SetLogLevelName 2, "Block"
	c.SetLogLevelName 3, "Trial"
	c.SetLogLevelName 4, "SubTrial"
	c.SetLogLevelName 5, "LogLevel5"
	c.SetLogLevelName 6, "LogLevel6"
	c.SetLogLevelName 7, "LogLevel7"
	c.SetLogLevelName 8, "LogLevel8"
	c.SetLogLevelName 9, "LogLevel9"
	c.SetLogLevelName 10, "LogLevel10"

	' Set standard logging items
	ebContext.SetAttrib "Experiment", "ID1_b1b6_Training_Feet_Seq11and12_Final"
	ebContext.SetAttrib "SessionDate", Date$
	ebContext.SetAttrib "SessionTime", Time$
	ebContext.SetAttrib "SessionStartDateTimeUtc", NowUtc()

	'Initialize global variables for packages
	InitGlobals c

	' Initialize the Display Device(s) for runtime
	Dim ebDisplayDisplayDeviceInfo As DisplayDeviceInfo
	ebDisplayDisplayDeviceInfo.DefaultColor = Color.White
	ebDisplayDisplayDeviceInfo.DisplayIndex = 1
	If c.AttribExists(ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r) Then ebDisplayDisplayDeviceInfo.DefaultColor = CColor(c.GetAttrib(ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r))
	If c.AttribExists(ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then ebDisplayDisplayDeviceInfo.DisplayIndex = CLng(c.GetAttrib(ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))

	
	
	CreateDefaultPort ebDisplayDisplayDeviceInfo.DefaultColor, "", ebDisplayDisplayDeviceInfo.DisplayIndex
	
	If Basic.OS = ebWin32 Then
		WinActivate "E-Run Experiment Window"
	End If

	' Get the StartupInfo

	' Set the defaults for all of the StartupInfo
	If Not c.AttribExists("Subject") Then c.SetAttrib "Subject", "1"
	If Not c.AttribExists("Session") Then c.SetAttrib "Session", "1"

	' Determine if StartupInfo.UseDefaults exists and is True/False to override prompts for StartupInfo parameters
	Dim bStartupInfoUseDefaults As Boolean
	bStartupInfoUseDefaults = False
	If c.AttribExists("StartupInfo.UseDefaults") Then bStartupInfoUseDefaults = CLogical(c.GetAttrib("StartupInfo.UseDefaults"))
	If Not bStartupInfoUseDefaults Then

		Dim vAnswer As Variant
StartupInfo_Begin:

StartupInfoPrompt_Subject:
		vAnswer = AskBox("Please enter the Subject Number (1-32767, 0=No Data Logging):", c.GetAttrib("Subject"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) < 0 Then
				MsgBox "The value for Subject must not be less than 0"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Subject must not be greater than 32767"
				GoTo StartupInfoPrompt_Subject
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Subject", CStr(vAnswer)

StartupInfoPrompt_Session:
		vAnswer = AskBox("Please enter the Session Number (1-32767):", c.GetAttrib("Session"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) < 1 Then
				MsgBox "The value for Session must not be less than 1"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Session must not be greater than 32767"
				GoTo StartupInfoPrompt_Session
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Session", CStr(vAnswer)

		' Display the summary
		Dim strSummary As String
		strSummary = "Subject:    " & c.GetAttrib("Subject") & "\n"
		strSummary = strSummary & "Session:    " & c.GetAttrib("Session") & "\n"
		strSummary = strSummary & "\nContinue with the above startup info?"

		Dim nSummaryAnswer As Integer
		nSummaryAnswer = MsgBox(strSummary, ebYesNoCancel + ebQuestion, "Summary of Startup Info")
		If nSummaryAnswer = ebNo Then
				GoTo StartupInfo_Begin
		ElseIf nSummaryAnswer = ebCancel Then
				GoTo ExperimentAbort
		End If

	End If


	'Assign the Clock.Scale value
	Clock.Scale = 1.000000

	'If the attribute Clock.Scale.Override exists
	'  then use it for to set the Clock.Scale value
	If c.AttribExists("Clock.Scale.Override") Then
		Clock.Scale = CDbl(c.GetAttrib("Clock.Scale.Override"))
	End If

	' Set the Filenames for the data files
	Dim strFilenameBase As String
	Dim strFilenameRecovery As String
	Dim strFilenameEDAT As String

	'If the attribute DataFile.Filename.Override exists
	'  then use it for the .txt and .edat2 filenames
	If c.AttribExists("DataFile.Filename.Override") Then

		' Set the default Data Filename
		strFilenameBase = CStr(c.GetAttrib("DataFile.Filename.Override"))

	Else

		' Set the default Data Filename
		strFilenameBase = CStr(c.GetAttrib("Experiment")) & "-" & CStr(c.GetAttrib("Subject")) & "-" & CStr(c.GetAttrib("Session"))

	End If

	'Set the name of the data file
	strFilenameRecovery = strFilenameBase & ".txt"
	strFilenameEDAT = strFilenameBase & ".edat2"
	c.DataFile.Filename = strFilenameRecovery
	c.SetAttrib "DataFile.Basename", strFilenameBase

	' If we are logging data, then prompt to overwrite the data file if it exists
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		If FileExists(c.DataFile.Filename) Or FileExists(strFilenameEDAT) Then
			If ebYes <> MsgBox("WARNING: The data file and/or recovery file already exists:\nFILE: " & c.DataFile.Filename & "\n\nDo you want to overwrite?", ebYesNo + ebQuestion) Then
				GoTo ExperimentAbort
			End If
			' If you receive an error here then ensure that your E-Recovery (txt) file or 
			' the edat2 file is not open and then try the experiment run again.
			If FileExists(strFilenameEDAT) Then Kill strFilenameEDAT
			If FileExists(c.DataFile.Filename) Then Kill c.DataFile.Filename
		End If
	End If

	' Set defaults for RandomSeed and GroupNumber if StartupInfo did not assign their values
	If Not c.AttribExists("RandomSeed") Then c.SetAttrib "RandomSeed", PRNG.GetSeed()
	If Not c.AttribExists("Group") Then c.SetAttrib "Group", "1"

	'Set the random seed
	Randomize CLng(c.GetAttrib("RandomSeed"))

	Dim nPriority As Long
	'Priority for init routines
	nPriority = 3

	'Determine if the priority should use the override value
	If c.AttribExists("SetOSThreadPriority.Init.Override") Then
		nPriority = c.GetAttrib("SetOSThreadPriority.Init.Override")
	End If

	'Update E-Prime Priority for INIT routines
	SetOSThreadPriority nPriority

	' Initialize all system devices, packages, and objects
	InitDevices c
	InitPackages c
	InitObjects c

	'Priority for start of experiment
	nPriority = -1

	'Determine if the priority should use the override value
	If c.AttribExists("SetOSThreadPriority.Override") Then
		nPriority = c.GetAttrib("SetOSThreadPriority.Override")
	End If

	'Update E-Prime Priority for start of experiment
	SetOSThreadPriority nPriority

	'Disable System power save mode
	Rte.PreventSystemIdle = True

	If CLng(c.GetAttrib("Subject")) < 0 Then
		Rte.AbortExperiment 12102, ebUCase_S & ebLCase_u & ebLCase_b & ebLCase_j & ebLCase_e & ebLCase_c & ebLCase_t & ebSpace & ebLCase_c & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_l & ebLCase_e & ebLCase_s & ebLCase_s & ebSpace & ebLCase_t & ebLCase_h & ebLCase_a & ebLCase_n & ebSpace & ebDigit_0 & ebDot
	End If

	If CLng(c.GetAttrib("Session")) < 1 Then
		Rte.AbortExperiment 12103, ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebSpace & ebLCase_c & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_l & ebLCase_e & ebLCase_s & ebLCase_s & ebSpace & ebLCase_t & ebLCase_h & ebLCase_a & ebLCase_n & ebSpace & ebDigit_1 & ebDot
	End If

	' If we are logging data, then open the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Open
		c.LogHeader
	End If


	'Setup the DataFile.BaseName attribute
	c.SetAttrib "DataFile.BaseName", Replace(c.DataFile.Filename, ".txt", ebEmptyText)

	' Log clock timing information
	c.SetAttrib "Clock.Information", Clock.Information

	' Log E-Studio version
	c.SetAttrib "StudioVersion", "2.0.10.252"

	' Log runtime version.
	c.SetAttrib "RuntimeVersion", Rte.Version.Major & ebDot & Rte.Version.Minor & ebDot & Rte.Version.Internal & ebDot & Rte.Version.Build
	c.SetAttrib "RuntimeVersionExpected", 2 & ebDot & 0 & ebDot & 10 & ebDot & 356
	c.SetAttrib "RuntimeCapabilities", ebUCase_S & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_d

	' Log experiment version
	c.SetAttrib "ExperimentVersion", "1.0.0.250"

	' ExperimentStart
	 Rte.ExperimentStart
	' Start the running of the Experiment
	SessionProc.Run c
	' ExperimentFinish
	 Rte.ExperimentFinish

	' Clean up the context and close the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		Dim nDataFileConvertProgress As Long
		nDataFileConvertProgress = ebProgressSimple
		If c.AttribExists("DataFile.ConvertProgress") Then nDataFileConvertProgress = CLng(c.GetAttrib("DataFile.ConvertProgress"))
		c.DataFile.Close
		' Attempt to convert the recovery file into a data file
		Dim nConvert As Long
		nConvert = c.DataFile.Convert(nDataFileConvertProgress)

		If nConvert = 0 Then
			' Settings in E-Studio are set to not remove E-Recovery file
		Else
			' The datafile failed to convert!
			MsgBox "ERROR: The datafile did not convert!\nFILE: " & c.DataFile.Filename & "\n\nIt is recommended that you recover your data with the E-Recovery utility"
			MsgBox c.DataFile.GetLastErrorMessage()
		End If
	End If
ExperimentFinish:

	UnInitObjects

	UnInitPackages
	UnInitDevices

	UnInitGlobals

ExperimentAbort:

	' Clean up the context
	c.PopFrame
	Set c = Nothing
	Set ebContext = Nothing

	DestroyDefaultPort

End Sub
