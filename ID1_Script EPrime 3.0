C:\Users\cutba\Downloads\Training\Sequence A 6.ebs3
'	Generated on: 3/4/2025	12:46:29
'
'
'	This experiment has been generated with E-Prime version: 3.0.3.60
'
'	This file generated with the E-Studio interface.
'	E-Prime Â© 1996-2017 Psychology Software Tools, Inc.
'	ALL RIGHTS RESERVED
'
'	Legal use of this experiment script requires a full E-Prime or Runtime License.
'
'
'	Author:
'		GW-ISM-aio (Universiteit Twente)
'
'
'
'

Option CStrings On
Dim ebContext as Context


'--------------------------------------------------------------------------
' Class Declarations
'--------------------------------------------------------------------------






































'--------------------------------------------------------------------------
' Instance Declarations
'--------------------------------------------------------------------------
Dim MVNudpCommands As SocketDevice
Dim ebSound As SoundDevice
Dim Keyboard As KeyboardDevice
Dim Mouse As MouseDevice
Dim ebDisplay As DisplayDevice
Dim Button As ButtonDevice
' List Attribute Constants
Const attrib_weight = ebUCase_W & ebLCase_e & ebLCase_i & ebLCase_g & ebLCase_h & ebLCase_t
Const attrib_nested = ebUCase_N & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d
Const attrib_procedure = ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
Const attrib_correctanswer = ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_s & ebLCase_w & ebLCase_e & ebLCase_r
Const attrib_gonogo = ebLCase_g & ebLCase_o & ebLCase_n & ebLCase_o & ebLCase_g & ebLCase_o

Dim BlockList1 As List

Dim Cuelist1 As List

Dim List2 As List

Dim List1 As List

Dim List3 As List

Dim SessionProc As Procedure

Dim seq1 As Procedure

Dim cueprocedure As Procedure

Dim toetsenbordprocedure As Procedure

Dim sequentieprocedure As Procedure

Dim fixatieprocedure As Procedure

Dim responsprocedure As Procedure

Dim feedbackprocedure As Procedure

Dim cuelist2 As Procedure

Dim nogoprocedure As Procedure

Dim fixprocedure As Procedure

Dim Instructie As TextDisplay
Dim InstructieEchoClients As EchoClientCollection

Dim Einde As TextDisplay

Dim Fback As TextDisplay

Dim Fback2 As TextDisplay

Dim Pauze As TextDisplay

Dim Nog3sec As TextDisplay

Dim Nog2sec As TextDisplay

Dim Nog1sec As TextDisplay

Dim cue As TextDisplay

Dim toetsenbord As TextDisplay
Dim toetsenbordEchoClients As EchoClientCollection

Dim fixatie As TextDisplay
Dim fixatieEchoClients As EchoClientCollection

Dim nogo As TextDisplay
Dim nogoEchoClients As EchoClientCollection

Dim feedback As TextDisplay
Dim feedbackEchoClients As EchoClientCollection

Dim fout1 As TextDisplay

Dim fout2 As TextDisplay

Dim fout3 As TextDisplay

Dim fout4 As TextDisplay

Dim tevroeg As TextDisplay

Dim wacht As TextDisplay
Dim wachtEchoClients As EchoClientCollection

Dim fout As TextDisplay

Dim fout5 As TextDisplay

Dim fout6 As TextDisplay

Dim go As TextDisplay

Dim goed As TextDisplay

Dim fout7 As TextDisplay

Dim fout8 As TextDisplay

Dim fout9 As TextDisplay

Dim fout10 As TextDisplay

Dim fout11 As TextDisplay

Dim fout12 As TextDisplay

Dim fout13 As TextDisplay

Dim fout14 As TextDisplay

Dim fout15 As TextDisplay

Dim fout16 As TextDisplay

Dim fout17 As TextDisplay

Dim fout18 As TextDisplay



'--------------------------------------------------------------------------
' Package Declare Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' User Script - BEGIN
'--------------------------------------------------------------------------
'voor de feedback
Dim score1 As Integer
Dim score2 As Integer
Dim reactietijd As Summation
Dim fouten As Integer
Dim f1 As Integer
Dim f2 As Integer
Dim f3 As Integer
Dim f4 As Integer
Dim f5 As Integer
Dim f6 As Integer
Dim f7 As Integer
Dim f8 As Integer
Dim f9 As Integer
Dim f10 As Integer
Dim f11 As Integer
Dim f12 As Integer
Dim f13 As Integer
Dim f14 As Integer
Dim f15 As Integer
Dim f16 As Integer
Dim f17 As Integer
Dim f18 As Integer

'voor het tekenen
Dim d As Integer
Dim currentposition As Integer
Dim fillcolor As String
Dim cnvs As Canvas
Dim i As Integer 
Dim a As Integer
Dim b As Integer
Dim p As Integer

'aantallen aangeven
Dim AantalKerenPerW As Integer
Dim AantalLoops As Integer
Dim h As Integer
Dim w As Integer
Dim r As Integer
Dim match As Boolean 
Dim q As Integer

'voor het tellen van aantal keren sequentie
Dim h1Loop As Integer
Dim h2Loop As Integer
Dim h3Loop As Integer
Dim h4Loop As Integer
Dim h5Loop As Integer
Dim h6Loop As Integer
Dim h7Loop As Integer
Dim h8Loop As Integer
Dim h9Loop As Integer
Dim h10Loop As Integer
Dim h11Loop As Integer
Dim h12Loop As Integer
Dim h13Loop As Integer
Dim h14Loop As Integer
Dim h15Loop As Integer
Dim h16Loop As Integer
Dim h17Loop As Integer
Dim h18Loop As Integer
Dim h19Loop As Integer
Dim h20Loop As Integer
Dim h21Loop As Integer
Dim h22Loop As Integer
Dim h23Loop As Integer
Dim h24Loop As Integer
Dim h25Loop As Integer
Dim h26Loop As Integer
Dim h27Loop As Integer
Dim h28Loop As Integer
Dim h29Loop As Integer
Dim h30Loop As Integer
Dim h31Loop As Integer
Dim h32Loop As Integer

'voor correct answer
Dim ca As String

'sessienummer
Dim sessionnr As Integer

'Declare constants
Const SIGNAL_PORT= 888 'Base address of the parallel port\

' Set DEBUG_LSL = False to disable Debug.Print messages
#Const DEBUG_LSL = True

/** Global variables for access anywhere in the experiment.
* If you are using multiple output/outlets streams you will have to add additional global variables
* for g_lsl_info and g_lsl_outlet to manage each new outlet.
*/
Dim g_lsl_info As Long 		' handle for lsl_stream_info
Dim g_lsl_outlet As Long 	' handle lsl_outlet

/**
* Callback function for ScriptTaskEvents used to send markers associated to the OnsetTime of
* a specified object.
*
* The <object>.OnsetTime for the specified object is sent as the timestamp of the event.
* 
* The MARKER string is obtained from the <object>.Tag property of the referenced object.
*
* To send a marker you would typically setup a ScriptTaskEvent on each events of 
* interest e.g., Fixation, Stimulus, Mask, etc.
*
* For each object...
* 	Select the TaskEvent tab in the object's Property Pages
* 	Add the object.OnsetTime Event
*	Add the Script Task
*	Select the subroutine below from the Action dropdown
*	Select String as the Data Type
*	Specify the name of the object in the Custom field.
* 	Make sure the object's Tag property is set to the marker string (or an attribute reference
* containing the marker) you want to send.
*/
Sub LSLSendOnsetMarker( c As Context, theObjectName As String)
	Dim ret As Long
	Dim theObject As RteRunnableObject
	Dim s As String
	
	' Use the object name that was passed in to get a reference to the object. 
	Set theObject = CRteRunnableObject( Rte.GetObject( theObjectName ) )
	Debug.Assert Not theObject Is Nothing
	
	s = LTrim(RTrim(theObject.Tag))
	ret = lsl_push_sample_str( g_lsl_outlet, s )
	
#If DEBUG_LSL Then
	Debug.Print "lsl_local_clock=" & lsl_local_clock()
	Debug.Print "lsl_push_sample_str( '" & s & "' ), ret=" & ret
	Debug.Print "LenB(s)=" & LenB(s)
#End If

End Sub


/**
* Callback function for ScriptTaskEvents used to send markers associated to the RTTime of
* a specific object.
*
* The <object>.RTTime for the specified object is sent as the RTTIME timestamp of the event.
* 
* The MARKER string is obtained from the <object>.Tag property of the referenced object.
*
* To send a marker you would typically setup a ScriptTaskEvent on each events of 
* interest e.g., Fixation, Stimulus, Mask, etc.
*
* For each object...
* 	Select the TaskEvent tab in the object's Property Pages
* 	Add the object.Press Event
*	Add the Script Task
*	Select the subroutine below from the Action dropdown
*	Select RTTime as the Source
*	Select String as the Data Type
* 	Make sure the object's Tag property is set to the marker string (or an attribute reference
* containing the marker) you want to send.
*/
Sub LSLSendStimulusRTTimeMarker( c As Context, theRTTime As String)
	Dim ret As Long
	Dim theObject As RteRunnableObject
	Dim s As String
	' This marker is specific to Stimulus, if you rename your object, change it here.
	Set theObject = CRteRunnableInputObject( Rte.GetObject( "feedback" ) )
	Debug.Assert Not theObject Is Nothing
	
	s = LTrim(RTrim("<EPEVENT><RTTIME>" & theRTTime & "</RTTIME><MARKER>" & theObject.Tag & "</MARKER></EPEVENT>"))
	ret = lsl_push_sample_str( g_lsl_outlet, s )
	
#If DEBUG_LSL Then
	Debug.Print "lsl_local_clock=" & lsl_local_clock()
	Debug.Print "lsl_push_sample_str( '" & s & "' ), ret=" & ret
	Debug.Print "LenB(s)=" & LenB(s)
#End If

End Sub


/**
* NOTE: This is currently not used in this sample but included for reference if you need to send a generic timestamp marker.
*
* Callback function for ScriptTaskEvents used to send markers at the current clock time.
* 
* The current time from E-Prime's Clock.Read is sent as a timestamp of the event.
*
* The MARKER string is set as the Custom value entered.
*
* To send a marker you would typically setup a ScriptTaskEvent on each events of 
* interest e.g., Fixation, Stimulus, Mask, etc.
*
* NOTE: This is not tied specifically to any dependent measure.
*
* For each object...
* 	Select the TaskEvent tab in the object's Property Pages
* 	Add the object. Event of your choice
*	Add the Script Task
*	Select the subroutine below from the Action dropdown
*	Select String as the Data Type
*	Specify the MARKER string (or an attribute reference containing the marker) you 
* 	want to send in the Custom field.  
*/
Sub LSLSendTimestampMarker(s1 As String)
	Dim ret As Long
	ret = lsl_push_sample_str( g_lsl_outlet, s1 )

End Sub

'--------------------------------------------------------------------------
' User Script - END
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Package Global Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Implementation
'--------------------------------------------------------------------------
Sub SessionProc_Run(c as Context)
	SessionProc.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SessionProc.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SessionProc.TimelineStart
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - LSLInit BEGIN <LSLInit>
	'''''''''''''''''''''''''''''''''''''''''''''
	#If DEBUG_LSL Then
	' Verify the LIBLSL protocol and library versions
	Dim protocol_version As Long
	Dim library_version As Long
	protocol_version = lsl_protocol_version()
	library_version = lsl_library_version()
	Debug.Print "lsl_protocol_version=" & protocol_version
	Debug.Print "lsl_library_version=" & library_version
	Debug.Print "lsl_library_version, major=" & library_version \ 100
	Debug.Print "lsl_library_version, minor=" & library_version Mod 100
	Debug.Print "lsl_local_clock=" & lsl_local_clock()
#End If

/* declare a new streaminfo (name: "MyEventStream", content type: "Markers", 1 channel, irregular rate, ... */
/* ... string values, some made-up source id (can also be empty) */
g_lsl_info = lsl_create_streaminfo( "E-Prime", "Markers", 1, LSL_IRREGULAR_RATE, cft_string, "303214")
#If DEBUG_LSL Then
	Debug.Print "lsl_create_streaminfo=" & g_lsl_info
#End If

/* make a new outlet (chunking: default, buffering: 360k markers) */
g_lsl_outlet = lsl_create_outlet( g_lsl_info, 0, 360 )
#If DEBUG_LSL Then
	Debug.Print "lsl_create_outlet=" & g_lsl_outlet
#End If
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - LSLInit END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - LSLWaitForConsumers BEGIN <LSLWaitForConsumers>
	'''''''''''''''''''''''''''''''''''''''''''''
	' Wait up to 30 seconds for LSL consumer
Dim ret As Long
ret = lsl_wait_for_consumers( g_lsl_outlet, 30.0 )
If (ret = 0) Then
	MsgBox "No consumers found!"
End If

#If DEBUG_LSL Then
	Debug.Print "lsl_local_clock=" & lsl_local_clock()
	Debug.Print "lsl_get_name=" & lsl_get_name( g_lsl_info )
	Debug.Print "lsl_get_type=" & lsl_get_type( g_lsl_info )
	Debug.Print "lsl_get_channel_count=" & lsl_get_channel_count( g_lsl_info )
	Debug.Print "lsl_get_nominal_srate=" & lsl_get_nominal_srate( g_lsl_info )
	Debug.Print "lsl_get_channel_format=" & lsl_get_channel_format( g_lsl_info )
	Debug.Print "lsl_get_source_id=" & lsl_get_source_id( g_lsl_info )
	Debug.Print "lsl_get_version=" & lsl_get_version( g_lsl_info )
	Debug.Print "lsl_get_created_at=" & lsl_get_created_at( g_lsl_info )
	Debug.Print "lsl_get_uid=" & lsl_get_uid( g_lsl_info )
	Debug.Print "lsl_get_session_id=" & lsl_get_session_id( g_lsl_info )
	Debug.Print "lsl_get_hostname=" & lsl_get_hostname( g_lsl_info )
#End If
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - LSLWaitForConsumers END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine1 BEGIN <InLine1>
	'''''''''''''''''''''''''''''''''''''''''''''
	instructie.OnsetSignalEnabled = True
MVNudpCommands.Writestring "<AddMarkerReq Text =""28""/>"
LSLSendTimestampMarker("28")
'signals start
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine1 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	Instructie.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		InstructieEchoClients.RemoveAll
		Instructie.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, _ 
				ebEmptyText, _ 
				CLng(Instructie.Duration), _ 
				CLng(ebDigit_1), _ 
				ebEndResponseActionTerminate, _ 
				CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), _ 
				ebEmptyText, _ 
				ebEmptyText, _ 
				ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s & ebSpace & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e & ebColon & ebUCase_A & ebLCase_l & ebLCase_l & ebSpace & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_s & ebLCase_s & ebUCase_B & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_s & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s)

	
	End If

	Instructie.Run
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label4 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label4:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label4Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label4Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label4 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - setvariabelen BEGIN <setvariabelen>
	'''''''''''''''''''''''''''''''''''''''''''''
	MVNudpCommands.Writestring "<AddMarkerReq Text=""29""/>"
LSLSendTimestampMarker("29") 
'writeport &HE010, 0
'writeport &HE010, 29 'Set variables.

'deze variabelen geven feedback
Set reactietijd = New summation
fouten = 0

'd shows which square lights up
d=1

'shows how many loops per block and loops per sequence
AantalLoops = 24
AantalKerenPerW = AantalLoops / 2 

h1Loop = 0
h2Loop = 0
h3Loop = 0 
h4Loop = 0

'deze variabelen geven de lijndikte, lijnkleur en vulkleur aan van het tekenen
Set cnvs = ebDisplay.Canvas
cnvs.PenWidth = 3
cnvs.PenColor = CColor("silver")
cnvs.FillColor = CColor ("black")
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - setvariabelen END
	'''''''''''''''''''''''''''''''''''''''''''''
	
		BlockList1.Run c
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine5 BEGIN <InLine5>
	'''''''''''''''''''''''''''''''''''''''''''''
	'zet de waarden voor feedback
c.SetAttrib "score2", CInt(reactietijd.mean)
c.SetAttrib "score1", (fouten)

' het aantal keren dat BlockList1 doorlopen moet worden
q = q + 1 

'voor sessie 1-4 wordt blocklist1 2x doorlopen
'voor sessies boven de 4 wordt blocklist1 1x doorlopen

'for session 1-4 blocklist1 is completed twice
'For sessions above 4, blocklist1 is run through 1x

If sessionnr < 10 Then
	If q = 2 Then GoTo Label2
Else 
	If q = 1 Then GoTo Label2
End If
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine5 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	Fback.Text = "Your average reaction time was " &_ 
				c.GetAttrib("score2") &_ 
				" ms \nand you made " &_ 
				c.GetAttrib("score1") &_ 
				" mistakes.\n\n"
	
	Fback.Run
	
	
	Pauze.Run
	
	
	Nog3sec.Run
	
	
	Nog2sec.Run
	
	
	Nog1sec.Run
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine8 BEGIN <InLine8>
	'''''''''''''''''''''''''''''''''''''''''''''
	'opnieuw naar blocklist1
GoTo Label4

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine8 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label2 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label2:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label2Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label2Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label2 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	Fback2.Text = "Your average reaction time was " &_ 
				c.GetAttrib("score2") &_ 
				" ms \nand you made " &_ 
				c.GetAttrib("score1") &_ 
				" mistakes.\n\n"
	
	Fback2.Run
	
	
	Einde.Run
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - LSLUninit BEGIN <LSLUninit>
	'''''''''''''''''''''''''''''''''''''''''''''
	' Destroy the LIBLSL outlet that was created
lsl_destroy_outlet g_lsl_outlet
#If DEBUG_LSL Then
	Debug.Print "lsl_local_clock=" & lsl_local_clock()
	Debug.Print "lsl_destroy_outlet"
#End If
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - LSLUninit END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SessionProc.TimelineFinish
	Instructie.EndOfProcedure

	BlockList1.EndOfProcedure

	Fback.EndOfProcedure

	Pauze.EndOfProcedure

	Nog3sec.EndOfProcedure

	Nog2sec.EndOfProcedure

	Nog1sec.EndOfProcedure

	Fback2.EndOfProcedure

	Einde.EndOfProcedure

	SessionProc.EndOfProcedure

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SessionProc.ProcedureFinish
End Sub

Sub seq1_Run(c as Context)
	seq1.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	seq1.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	seq1.TimelineStart
		Cuelist1.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	seq1.TimelineFinish
	Cuelist1.EndOfProcedure

	seq1.EndOfProcedure

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	seq1.ProcedureFinish
End Sub

Sub cueprocedure_Run(c as Context)
	cueprocedure.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cueprocedure.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cueprocedure.TimelineStart
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - tekencues BEGIN <tekencues>
	'''''''''''''''''''''''''''''''''''''''''''''
	Fillcolor = "255,255,0"
'door h wordt de sequenties van links of rechts geselecteerd - h selects the sequences from the left or right
'door w wordt sequentie 1 of 2 geselecteerd - sequence 1 or 2 is selected by w
'b geeft aan welk vierkantje een kleur krijgt - b indicates which square is given a color

'Here we are going to just pick 4 the 1st four as they are then 2 sequences mirrored.

'Both sequences are the same to keep the code architecture the same while only having 1 sequence 
' 1
' Sequence 1
If h = 1 And d = 1 Then b = "2"
If h = 1 And d = 2 Then b = "3"
If h = 1 And d = 3 Then b = "0"
If h = 1 And d = 4 Then b = "1"
If h = 1 And d = 5 Then b = "3"
If h = 1 And d = 6 Then b = "2"

' Sequence 1
If h = 2 And d = 1 Then b = "2"
If h = 2 And d = 2 Then b = "3"
If h = 2 And d = 3 Then b = "0"
If h = 2 And d = 4 Then b = "1"
If h = 2 And d = 5 Then b = "3"
If h = 2 And d = 6 Then b = "2"



'---------------------------

d= d + 1 
If d = 7 Then d = 1	

'4 vierkantjes tekenen waarvan 1 gekleurd - Draw 4 squares, 1 of which is colored
cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45

If b = 0 Then
cnvs.FillColor = CColor (Fillcolor)
cnvs.Rectangle 297, 165, 45, 45

ElseIf b = 1 Then
cnvs.FillColor = CColor (Fillcolor)
cnvs.Rectangle 297, 265, 45, 45

ElseIf b = 2 Then
cnvs.FillColor = CColor (Fillcolor)
cnvs.Rectangle 247, 215, 45, 45

ElseIf b = 3 Then
cnvs.FillColor = CColor (Fillcolor)
cnvs.Rectangle 347, 215, 45, 45
End If

'Stimulus presentation markers/ setting the port and then sending signal data on the time of onset
'writeport &HE010, 0
cue.OnsetSignalPort = &HE010
If b=0 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""5""/>"
	LSLSendTimestampMarker("5") 
ElseIf b=1 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""6""/>"
	LSLSendTimestampMarker("6")
ElseIf b=2 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""7""/>"
	LSLSendTimestampMarker("7")
ElseIf b=3 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""8""/>"
	LSLSendTimestampMarker("8")
ElseIf b=5 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""9""/>"
	LSLSendTimestampMarker("9")
ElseIf b=6 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""10""/>"
	LSLSendTimestampMarker("10")
ElseIf b=7 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""11""/>"
	LSLSendTimestampMarker("11")
ElseIf b=8 Then 
	MVNudpCommands.Writestring "<AddMarkerReq Text =""12""/>"
	LSLSendTimestampMarker("12")
Else
	MVNudpCommands.Writestring "<AddMarkerReq Text =""13""/>"
	LSLSendTimestampMarker("13")
End If

cue.OnsetSignalEnabled = True

c.SetAttrib "h", h
c.PushNewFrame
c.SetAttrib "sequentie", c.GetAttrib("h")
c.Log 
c.PopFrame
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - tekencues END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	cue.Run
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetDelay, cue.OnsetDelay
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetTime, cue.OnsetTime
	c.SetAttrib cue.Name & ebDot & ebLogNameDurationError, cue.DurationError
	c.SetAttrib cue.Name & ebDot & ebLogNameRTTime, cue.RTTime
	c.SetAttrib cue.Name & ebDot & ebLogNameACC, cue.ACC
	c.SetAttrib cue.Name & ebDot & ebLogNameRT, cue.RT
	c.SetAttrib cue.Name & ebDot & ebLogNameRESP, cue.RESP
	c.SetAttrib cue.Name & ebDot & ebLogNameCRESP, cue.CRESP
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetToOnsetTime, cue.OnsetToOnsetTime
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cueprocedure.TimelineFinish
	cue.EndOfProcedure

	cueprocedure.EndOfProcedure
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetDelay, cue.OnsetDelay
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetTime, cue.OnsetTime
	c.SetAttrib cue.Name & ebDot & ebLogNameDurationError, cue.DurationError
	c.SetAttrib cue.Name & ebDot & ebLogNameRTTime, cue.RTTime
	c.SetAttrib cue.Name & ebDot & ebLogNameACC, cue.ACC
	c.SetAttrib cue.Name & ebDot & ebLogNameRT, cue.RT
	c.SetAttrib cue.Name & ebDot & ebLogNameRESP, cue.RESP
	c.SetAttrib cue.Name & ebDot & ebLogNameCRESP, cue.CRESP
	c.SetAttrib cue.Name & ebDot & ebLogNameOnsetToOnsetTime, cue.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cueprocedure.ProcedureFinish
End Sub

Sub toetsenbordprocedure_Run(c as Context)
	toetsenbordprocedure.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	toetsenbordprocedure.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	toetsenbordprocedure.TimelineStart
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - tekentoetsenbord BEGIN <tekentoetsenbord>
	'''''''''''''''''''''''''''''''''''''''''''''
	'4 vierkantjes worden getekend
'4 squares are drawn to show the keyboard positions.

'To state the positions.  Later the sequences will utilise these positions.  0 to 3 is left hand ASDF positions. 
'i stands for integer
'a is the is the position, seems there is specific formular for it. 

'0 to 3 is left hand positions asdf
'For i = 0 To 3
'a = 100+(i*50)
'cnvs.Rectangle a, 250, 40, 40
'Next i

'5 to 8 is right hand JKL: positions.
'For i = 5 To 8
'a = 100+(i*50)
'cnvs.Rectangle a, 250, 40, 40
'Next i


cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - tekentoetsenbord END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	toetsenbord.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		toetsenbordEchoClients.RemoveAll
		toetsenbord.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, _ 
				ebEmptyText, _ 
				CLng(toetsenbord.Duration), _ 
				CLng(ebDigit_1), _ 
				ebEndResponseActionTerminate, _ 
				CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), _ 
				ebEmptyText, _ 
				ebEmptyText, _ 
				ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s & ebSpace & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e & ebColon & ebUCase_A & ebLCase_l & ebLCase_l & ebSpace & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_s & ebLCase_s & ebUCase_B & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_s & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s)

	
	End If

	toetsenbord.Run
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetDelay, toetsenbord.OnsetDelay
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetTime, toetsenbord.OnsetTime
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameDurationError, toetsenbord.DurationError
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRTTime, toetsenbord.RTTime
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameACC, toetsenbord.ACC
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRT, toetsenbord.RT
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRESP, toetsenbord.RESP
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameCRESP, toetsenbord.CRESP
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetToOnsetTime, toetsenbord.OnsetToOnsetTime
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	toetsenbordprocedure.TimelineFinish
	toetsenbord.EndOfProcedure

	toetsenbordprocedure.EndOfProcedure
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetDelay, toetsenbord.OnsetDelay
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetTime, toetsenbord.OnsetTime
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameDurationError, toetsenbord.DurationError
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRTTime, toetsenbord.RTTime
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameACC, toetsenbord.ACC
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRT, toetsenbord.RT
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameRESP, toetsenbord.RESP
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameCRESP, toetsenbord.CRESP
	c.SetAttrib toetsenbord.Name & ebDot & ebLogNameOnsetToOnsetTime, toetsenbord.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	toetsenbordprocedure.ProcedureFinish
End Sub

Sub sequentieprocedure_Run(c as Context)
	sequentieprocedure.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	sequentieprocedure.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	sequentieprocedure.TimelineStart
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - sequentiekeuze BEGIN <sequentiekeuze>
	'''''''''''''''''''''''''''''''''''''''''''''
	'h en w geven aan welke sequentie getoont wordt - h and w indicate which sequence is displayed
'er zijn 4 combinaties van h en w, elke combinatie staat voor een sequentie - there are 4 combinations of h and w, each combination represents a sequence
'aantalkerenperw geeft aan hoe vaak een sequentie getoont moet worden - aantalkerenperw indicates how often a sequence should be displayed
'zie Inline13 - see Inline13
'als een sequentie vaak genoeg is getoont dan is de match true en wordt er nog - if a sequence is shown often enough then the match is true and there is still
'opnieuw getrokken - pulled again

'not sure why this is only between 1 to 8, what about 9 to 16? Are those used for test set?  These are the sequences that are being pulled.
						'Because only 8 x 6 key press sequences were used?
Do
match = True
	h = random (1,2)  
	
If h=1 And h1Loop < aantalkerenperw Then match = False
If h=2 And h2Loop < aantalkerenperw Then match = False 
Loop Until match = False

'hier worden de getoonde sequenties opgeteld - here the sequences shown are added together to add a counter so that they r not repeated
If h=1 Then h1Loop = h1loop + 1
If h=2 Then h2Loop = h2loop + 1

'This sends a marker to EEG to signal the Sequence that is being used. 
writeport &HE010, 0
If h=1 Then MVNudpCommands.Writestring "<AddMarkerReq Text =""41""/>" 
If h=1 Then LSLSendTimestampMarker("41") 
If h=2 Then MVNudpCommands.Writestring "<AddMarkerReq Text =""41""/>"
If h=2 Then LSLSendTimestampMarker("41") 

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - sequentiekeuze END
	'''''''''''''''''''''''''''''''''''''''''''''
	
		List2.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	sequentieprocedure.TimelineFinish
	List2.EndOfProcedure

	sequentieprocedure.EndOfProcedure

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	sequentieprocedure.ProcedureFinish
End Sub

Sub fixatieprocedure_Run(c as Context)
	fixatieprocedure.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixatieprocedure.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixatieprocedure.TimelineStart
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label3 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label3:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label3Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label3Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label3 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - goofnogo BEGIN <goofnogo>
	'''''''''''''''''''''''''''''''''''''''''''''
	'8 vierkantjes worden getekend - 8 squares are drawn
cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - goofnogo END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	fixatie.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		fixatieEchoClients.RemoveAll
		fixatie.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, _ 
				ebEmptyText, _ 
				CLng(fixatie.Duration), _ 
				CLng(ebDigit_8), _ 
				ebEndResponseActionTerminate, _ 
				CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), _ 
				ebEmptyText, _ 
				ebEmptyText, _ 
				ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s & ebSpace & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e & ebColon & ebUCase_A & ebLCase_l & ebLCase_l & ebSpace & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_s & ebLCase_s & ebUCase_B & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_s & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s)

	
	End If

	fixatie.Run
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetDelay, fixatie.OnsetDelay
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetTime, fixatie.OnsetTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameDurationError, fixatie.DurationError
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRTTime, fixatie.RTTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameACC, fixatie.ACC
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRT, fixatie.RT
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRESP, fixatie.RESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameCRESP, fixatie.CRESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetToOnsetTime, fixatie.OnsetToOnsetTime
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedbackfixatie BEGIN <feedbackfixatie>
	'''''''''''''''''''''''''''''''''''''''''''''
	'geen respons is goed, dan geen feedback - no response is good, then no feedback
'als er wel een respons is dan tevroeg (unreferenced E-Objects runnen) - if there is a response then too early (run unreferenced E-Objects)
'en dan opnieuw het toetsenbord laten zien - and then show the keyboard again
If fixatie.Acc = 1 Then GoTo Label1
If fixatie.Acc = 0 Then tevroeg.run
If fixatie.Acc = 0 Then GoTo Label3

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedbackfixatie END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label1:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label1Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label1Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine4 BEGIN <InLine4>
	'''''''''''''''''''''''''''''''''''''''''''''
	MVNudpCommands.Writestring "<AddMarkerReq Text =""27""/>"
LSLSendTimestampMarker("27")
writeport &HE010, 0
' Set output signal for ImageDisplay.
go.OnsetSignalPort = &HE010
go.OnsetSignalData = 27 'GO
go.OnsetSignalEnabled = True
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine4 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	go.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixatieprocedure.TimelineFinish
	fixatie.EndOfProcedure

	go.EndOfProcedure

	fixatieprocedure.EndOfProcedure
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetDelay, fixatie.OnsetDelay
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetTime, fixatie.OnsetTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameDurationError, fixatie.DurationError
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRTTime, fixatie.RTTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameACC, fixatie.ACC
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRT, fixatie.RT
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRESP, fixatie.RESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameCRESP, fixatie.CRESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetToOnsetTime, fixatie.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixatieprocedure.ProcedureFinish
End Sub

Sub responsprocedure_Run(c as Context)
	responsprocedure.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	responsprocedure.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	responsprocedure.TimelineStart
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - geeftca BEGIN <geeftca>
	'''''''''''''''''''''''''''''''''''''''''''''
	'correct answer (ca) aangeven

'Both sequences are the ame to keep code architecture the same while only having 1 sequence
' Sequence 1

' Seqeunce 1
If h = 1 And d = 1 Then ca = "a"
If h = 1 And d = 2 Then ca = "d"
If h = 1 And d = 3 Then ca = "w"
If h = 1 And d = 4 Then ca = "s"
If h = 1 And d = 5 Then ca = "d"
If h = 1 And d = 6 Then ca = "a"



' Sequence 1
If h = 2 And d = 1 Then ca = "a"
If h = 2 And d = 2 Then ca = "d"
If h = 2 And d = 3 Then ca = "w"
If h = 2 And d = 4 Then ca = "s"
If h = 2 And d = 5 Then ca = "d"
If h = 2 And d = 6 Then ca = "a"

' ---------------------------

d= d + 1 
If d = 7 Then d = 1	

c.SetAttrib "correctanswer", ca	

'8 vierkantjes worden getekend - 4 Squares drawn
cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45

c.SetAttrib "h", h
c.PushNewFrame
c.SetAttrib "sequentie", c.GetAttrib("h")
c.Log 
c.PopFrame

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - geeftca END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - resetbits BEGIN <resetbits>
	'''''''''''''''''''''''''''''''''''''''''''''
	'reset port
writeport &HE010, 0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - resetbits END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	feedback.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		feedbackEchoClients.RemoveAll
		feedback.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, _ 
				c.GetAttrib(ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_s & ebLCase_w & ebLCase_e & ebLCase_r), _ 
				CLng(feedback.Duration), _ 
				CLng(ebDigit_1), _ 
				ebEndResponseActionTerminate, _ 
				CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), _ 
				ebEmptyText, _ 
				ebEmptyText, _ 
				ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s & ebSpace & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e & ebColon & ebUCase_A & ebLCase_l & ebLCase_l & ebSpace & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_s & ebLCase_s & ebUCase_B & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_s & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s)

	
	End If

	feedback.Run
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetDelay, feedback.OnsetDelay
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetTime, feedback.OnsetTime
	c.SetAttrib feedback.Name & ebDot & ebLogNameDurationError, feedback.DurationError
	c.SetAttrib feedback.Name & ebDot & ebLogNameRTTime, feedback.RTTime
	c.SetAttrib feedback.Name & ebDot & ebLogNameACC, feedback.ACC
	c.SetAttrib feedback.Name & ebDot & ebLogNameRT, feedback.RT
	c.SetAttrib feedback.Name & ebDot & ebLogNameRESP, feedback.RESP
	c.SetAttrib feedback.Name & ebDot & ebLogNameCRESP, feedback.CRESP
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetToOnsetTime, feedback.OnsetToOnsetTime
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedback1 BEGIN <feedback1>
	'''''''''''''''''''''''''''''''''''''''''''''
	If feedback.RESP = "a" Then
	MVNudpCommands.Writestring "<AddMarkerReq Text =""14""/>"
	LSLSendTimestampMarker("14")
	'WritePort &HE010, 14
ElseIf feedback.RESP = "s" Then
	MVNudpCommands.Writestring "<AddMarkerReq Text =""15""/>"
	LSLSendTimestampMarker("15")
	'WritePort &HE010, 15
ElseIf feedback.RESP = "d" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""16""/>"
	LSLSendTimestampMarker("16")
	'WritePort &HE010, 16
ElseIf feedback.RESP = "w" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""17""/>"
	LSLSendTimestampMarker("17")
	'WritePort &HE010, 17
ElseIf feedback.RESP = "j" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""18""/>"
	'WritePort &HE010, 18
ElseIf feedback.RESP = "k" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""19""/>"
	'WritePort &HE010, 19
ElseIf feedback.RESP = "l" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""20""/>"
	'WritePort &HE010, 20
ElseIf feedback.RESP = "{;}" Then
	MVNudpCommands.WriteString "<AddMarkerReq Text =""21""/>"
	'WritePort &HE010, 21
Else 
	MVNudpCommands.WriteString "<AddMarkerReq Text =""22""/>"
	'WritePort &HE010, 22 'Random response
End If

'fouten optellen en opslaan - add and store errors
If feedback.Acc = 0 Then fouten = fouten + 1
reactietijd.AddObservation CDbl (c.GetAttrib("feedback.rt"))

'aangeven welke toetsdruk fout was (1t/m6) - indicates which keypress was wrong
If feedback.Acc = 0 And d = 2 Then f1=1
If feedback.Acc = 0 And d = 3 Then f2=1
If feedback.Acc = 0 And d = 4 Then f3=1
If feedback.Acc = 0 And d = 5 Then f4=1
If feedback.Acc = 0 And d = 6 Then f5=1
If feedback.Acc = 0 And d = 1 Then f6=1
If feedback.Acc = 0 And d = 7 Then f7=1
If feedback.Acc = 0 And d = 8 Then f8=1
If feedback.Acc = 0 And d = 9 Then f9=1
If feedback.Acc = 0 And d = 10 Then f10=1
If feedback.Acc = 0 And d = 11 Then f11=1
If feedback.Acc = 0 And d = 12 Then f12=1
If feedback.Acc = 0 And d = 13 Then f13=1
If feedback.Acc = 0 And d = 14 Then f14=1
If feedback.Acc = 0 And d = 15 Then f15=1
If feedback.Acc = 0 And d = 16 Then f16=1
If feedback.Acc = 0 And d = 17 Then f17=1
If feedback.Acc = 0 And d = 18 Then f18=1
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedback1 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	responsprocedure.TimelineFinish
	feedback.EndOfProcedure

	responsprocedure.EndOfProcedure
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetDelay, feedback.OnsetDelay
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetTime, feedback.OnsetTime
	c.SetAttrib feedback.Name & ebDot & ebLogNameDurationError, feedback.DurationError
	c.SetAttrib feedback.Name & ebDot & ebLogNameRTTime, feedback.RTTime
	c.SetAttrib feedback.Name & ebDot & ebLogNameACC, feedback.ACC
	c.SetAttrib feedback.Name & ebDot & ebLogNameRT, feedback.RT
	c.SetAttrib feedback.Name & ebDot & ebLogNameRESP, feedback.RESP
	c.SetAttrib feedback.Name & ebDot & ebLogNameCRESP, feedback.CRESP
	c.SetAttrib feedback.Name & ebDot & ebLogNameOnsetToOnsetTime, feedback.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	responsprocedure.ProcedureFinish
End Sub

Sub feedbackprocedure_Run(c as Context)
	feedbackprocedure.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	feedbackprocedure.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	feedbackprocedure.TimelineStart
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedback2 BEGIN <feedback2>
	'''''''''''''''''''''''''''''''''''''''''''''
	'in 10 % van de gevallen --> nogo (wanneer het fixatiekruis blauw is) - in 10% of cases -> nogo (when the fixation cross is blue)
'dan wacht (unreferenced E-Objects) runnen - Then wait (unreferenced E-Objects) To run
'anders feedback geven op de responses - give feedback on the responses otherwise


If f1 = 1 Then fout1.run
If f2 = 1 Then fout2.run
If f3 = 1 Then fout3.run
If f4 = 1 Then fout4.run
If f5 = 1 Then fout5.run
If f6 = 1 Then fout6.run

If f7 = 1 Then fout7.run
If f8 = 1 Then fout8.run
If f9 = 1 Then fout9.run
If f10 = 1 Then fout10.run
If f11 = 1 Then fout11.run
If f12 = 1 Then fout12.run

If f13 = 1 Then fout13.run
If f14 = 1 Then fout14.run
If f15 = 1 Then fout15.run
If f16 = 1 Then fout16.run
If f17 = 1 Then fout17.run
If f18 = 1 Then fout18.run
If f1 =0 And f2=0 And f3=0 And f4=0 And f5=0 And f6=0 And f7=0 And f8=0 And f9=0 And f10=0 And f11=0 And f12=0 And f13=0 And f14=0 And f15=0 And f16=0 And f17=0 And f18=0 Then goed.run 



'write EEG port. 
writeport &HE010, 0
If f1=1 Or f2=1 Or f3=1 Or f4=1 Or f5=1 Or f6=1 Or f7=1 Or f8=1 Or f9=1 Or f10=1 Or f11=1 Or f12=1 Or f13=1 Or f14=1 Or f15=1 Or f16=1 Or f17=1 Or f18=1 Then	
	MVNudpCommands.WriteString "<AddMarkerReq Text =""25""/>"
	LSLSendTimestampMarker("25")
	MVNudpCommands.WriteString "<AddMarkerReq Text =""30""/>"
	LSLSendTimestampMarker("30")
	'writeport &HE010, 25 'Error response
Else 
	MVNudpCommands.WriteString "<AddMarkerReq Text =""26""/>"
	LSLSendTimestampMarker("26")
	MVNudpCommands.WriteString "<AddMarkerReq Text =""30""/>"
	LSLSendTimestampMarker("30")
	'writeport &HE010, 26 'Good response
End If

'fouten weer op nul zetten - reset errors to zero
f1 = 0
f2 = 0
f3 = 0
f4 = 0
f5 = 0
f6 = 0
f7 = 0
f8 = 0
f9 = 0
f10 = 0
f11 = 0
f12 = 0
f13 = 0
f14 = 0
f15 = 0
f16 = 0
f17 = 0
f18 = 0



	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedback2 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	feedbackprocedure.TimelineFinish
	feedbackprocedure.EndOfProcedure

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	feedbackprocedure.ProcedureFinish
End Sub

Sub cuelist2_Run(c as Context)
	cuelist2.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cuelist2.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cuelist2.TimelineStart
		List1.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cuelist2.TimelineFinish
	List1.EndOfProcedure

	cuelist2.EndOfProcedure

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	cuelist2.ProcedureFinish
End Sub

Sub nogoprocedure_Run(c as Context)
	nogoprocedure.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	nogoprocedure.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	nogoprocedure.TimelineStart
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine3 BEGIN <InLine3>
	'''''''''''''''''''''''''''''''''''''''''''''
	'Start with an empty port to send trigger to EEG.

writeport &HE010, 0 
h = random (1,2) '

If h=1 Then MVNudpCommands.WriteString "<AddMarkerReq Text =""41""/>" 
If h=1 Then LSLSendTimestampMarker("41")
'writeport &HE010, 1
If h=2 Then MVNudpCommands.WriteString "<AddMarkerReq Text =""41""/>"
If h=2 Then LSLSendTimestampMarker("41")
'writeport &HE010, 2
'If h=3 Then writeport &HE010, 3
'If h=4 Then writeport &HE010, 4 
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine3 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
		List3.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	nogoprocedure.TimelineFinish
	List3.EndOfProcedure

	nogoprocedure.EndOfProcedure

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	nogoprocedure.ProcedureFinish
End Sub

Sub fixprocedure_Run(c as Context)
	fixprocedure.ArmTasks

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixprocedure.ProcedureStart

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixprocedure.TimelineStart
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label3 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label3:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label3Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label3Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label3 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - goofnogo BEGIN <goofnogo>
	'''''''''''''''''''''''''''''''''''''''''''''
	'8 vierkantjes worden getekend - 8 squares are drawn
cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 165, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 297, 265, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 247, 215, 45, 45

cnvs.FillColor = CColor ("black")
cnvs.Rectangle 347, 215, 45, 45
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - goofnogo END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	fixatie.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		fixatieEchoClients.RemoveAll
		fixatie.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, _ 
				ebEmptyText, _ 
				CLng(fixatie.Duration), _ 
				CLng(ebDigit_8), _ 
				ebEndResponseActionTerminate, _ 
				CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), _ 
				ebEmptyText, _ 
				ebEmptyText, _ 
				ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s & ebSpace & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e & ebColon & ebUCase_A & ebLCase_l & ebLCase_l & ebSpace & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_s & ebLCase_s & ebUCase_B & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_s & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s)

	
	End If

	fixatie.Run
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetDelay, fixatie.OnsetDelay
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetTime, fixatie.OnsetTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameDurationError, fixatie.DurationError
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRTTime, fixatie.RTTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameACC, fixatie.ACC
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRT, fixatie.RT
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRESP, fixatie.RESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameCRESP, fixatie.CRESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetToOnsetTime, fixatie.OnsetToOnsetTime
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedbackfixatie BEGIN <feedbackfixatie>
	'''''''''''''''''''''''''''''''''''''''''''''
	'geen respons is goed, dan geen feedback - no response is good, then no feedback
'als er wel een respons is dan tevroeg (unreferenced E-Objects runnen) - if there is a response then too early (run unreferenced E-Objects)
'en dan opnieuw het toetsenbord laten zien - and then show the keyboard again
If fixatie.Acc = 1 Then GoTo Label1
If fixatie.Acc = 0 Then tevroeg.run
If fixatie.Acc = 0 Then GoTo Label3

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - feedbackfixatie END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label1:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label1Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label1Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine6 BEGIN <InLine6>
	'''''''''''''''''''''''''''''''''''''''''''''
	MVNudpCommands.WriteString "<AddMarkerReq Text =""24""/>"
LSLSendTimestampMarker("24")
'writeport &HE010, 0
' Set output signal for ImageDisplay.
nogo.OnsetSignalPort = &HE010
nogo.OnsetSignalData = 24
nogo.OnsetSignalEnabled = True



	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine6 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	
	nogo.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		nogoEchoClients.RemoveAll
		nogo.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, _ 
				ebEmptyText, _ 
				CLng(nogo.Duration), _ 
				CLng(ebDigit_1), _ 
				ebEndResponseActionTerminate, _ 
				CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), _ 
				ebEmptyText, _ 
				ebEmptyText, _ 
				ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s & ebSpace & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e & ebColon & ebUCase_A & ebLCase_l & ebLCase_l & ebSpace & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_s & ebLCase_s & ebUCase_B & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_s & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebColon & ebUCase_Y & ebLCase_e & ebLCase_s)

	
	End If

	nogo.Run
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine2 BEGIN <InLine2>
	'''''''''''''''''''''''''''''''''''''''''''''
	'If they pressed something during the NoGo then 23 is triggered.

writeport &HE010, 0
If nogo.Acc = 0 Then MVNudpCommands.WriteString "<AddMarkerReq Text =""23""/>"
If nogo.Acc = 0 Then LSLSendTimestampMarker("23")
'writeport &HE010, 23 'pressed during no go.
If nogo.Acc = 1 Then GoTo Label8
If nogo.Acc = 0 Then fout.run
If nogo.Acc = 0 Then fouten = fouten + 6  'Adds 6 mistakes to the counter
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine2 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label8 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label8:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label8Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label8Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label8 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixprocedure.TimelineFinish
	fixatie.EndOfProcedure

	nogo.EndOfProcedure

	fixprocedure.EndOfProcedure
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetDelay, fixatie.OnsetDelay
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetTime, fixatie.OnsetTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameDurationError, fixatie.DurationError
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRTTime, fixatie.RTTime
	c.SetAttrib fixatie.Name & ebDot & ebLogNameACC, fixatie.ACC
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRT, fixatie.RT
	c.SetAttrib fixatie.Name & ebDot & ebLogNameRESP, fixatie.RESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameCRESP, fixatie.CRESP
	c.SetAttrib fixatie.Name & ebDot & ebLogNameOnsetToOnsetTime, fixatie.OnsetToOnsetTime
	

	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	fixprocedure.ProcedureFinish
End Sub



'--------------------------------------------------------------------------
' PreInitDevices
'
'--------------------------------------------------------------------------
Sub PreInitDevices(c As Context)

End Sub



'--------------------------------------------------------------------------
' PostInitDevices
'
'--------------------------------------------------------------------------
Sub PostInitDevices(c As Context)


	' Log DisplayDevice(s) Refresh Rates
Dim ebDisplayOpen As Boolean
	ebDisplayOpen = True
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then ebDisplayOpen = CLogical(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If ebDisplayOpen = True Then
		c.SetAttrib ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e, Format$(ebDisplay.CalculatedRefreshRate, ebDigit_0 & ebDot & ebDigit_0 & ebDigit_0 & ebDigit_0)

		'Ensure that the refresh rate is acceptable
		If CLng(ebDisplay.CalculatedRefreshRate) = 0 Then
			'WARNING: RefreshRate of 0 (Zero) Detected.  Experiment will assume 60hz to continue. Data collection should NOT be used for time critical analysis.  Please ensure your display adapter is configured with the most recent and device specific driver.\n(Standard Display Adapter under Windows Vista or later is not compatible)
			Dim strebDisplayError As String
			strebDisplayError = ebUCase_W & ebUCase_A & ebUCase_R & ebUCase_N & ebUCase_I & ebUCase_N & ebUCase_G & ebColon & ebSpace & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebSpace & ebLCase_o & ebLCase_f & ebSpace & ebDigit_0 & ebSpace & ebParenOpen & ebUCase_Z & ebLCase_e & ebLCase_r & ebLCase_o & ebParenClose & ebSpace & ebUCase_D & ebLCase_e & ebLCase_t & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_e & ebLCase_d & ebDot & ebSpace & ebSpace & ebUCase_E & ebLCase_x & ebLCase_p & ebLCase_e & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_w & ebLCase_i & ebLCase_l & ebLCase_l & ebSpace & ebLCase_a & ebLCase_s & ebLCase_s & ebLCase_u & ebLCase_m & ebLCase_e & ebSpace & ebDigit_6 & ebDigit_0 & ebLCase_h & ebLCase_z & ebSpace & ebLCase_t & ebLCase_o & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_u & ebLCase_e & ebDot & ebSpace & ebUCase_D & ebLCase_a & ebLCase_t & ebLCase_a & ebSpace & ebLCase_c & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebSpace & ebLCase_s & ebLCase_h & ebLCase_o & ebLCase_u & ebLCase_l & ebLCase_d & ebSpace & ebUCase_N & ebUCase_O & ebUCase_T & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_u & ebLCase_s & ebLCase_e & ebLCase_d & ebSpace & ebLCase_f & ebLCase_o & ebLCase_r & ebSpace & ebLCase_t & ebLCase_i & ebLCase_m & ebLCase_e & ebSpace & ebLCase_c & ebLCase_r & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_a & ebLCase_l & ebSpace & ebLCase_a & ebLCase_n & ebLCase_a & ebLCase_l & ebLCase_y & ebLCase_s & ebLCase_i & ebLCase_s & ebDot & ebSpace & ebSpace & ebUCase_P & ebLCase_l & ebLCase_e & ebLCase_a & ebLCase_s & ebLCase_e & ebSpace & ebLCase_e & ebLCase_n & ebLCase_s & ebLCase_u & ebLCase_r & ebLCase_e & ebSpace & ebLCase_y & ebLCase_o & ebLCase_u & ebLCase_r & ebSpace & ebLCase_d & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebLCase_a & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_g & ebLCase_u & ebLCase_r & ebLCase_e & ebLCase_d & ebSpace & ebLCase_w & ebLCase_i & ebLCase_t & ebLCase_h & ebSpace & ebLCase_t & ebLCase_h & ebLCase_e & ebSpace & ebLCase_m & ebLCase_o & ebLCase_s & ebLCase_t & ebSpace & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_a & ebLCase_n & ebLCase_d & ebSpace & ebLCase_d & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebSpace & ebLCase_s & ebLCase_p & ebLCase_e & ebLCase_c & ebLCase_i & ebLCase_f & ebLCase_i & ebLCase_c & ebSpace & ebLCase_d & ebLCase_r & ebLCase_i & ebLCase_v & ebLCase_e & ebLCase_r & ebDot & ebLf & ebParenOpen & ebUCase_S & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_d & ebSpace & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebUCase_A & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_u & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_r & ebSpace & ebUCase_W & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_o & ebLCase_w & ebLCase_s & ebSpace & ebUCase_V & ebLCase_i & ebLCase_s & ebLCase_t & ebLCase_a & ebSpace & ebLCase_o & ebLCase_r & ebSpace & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_p & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_b & ebLCase_l & ebLCase_e & ebParenClose
			Debug.Print strebDisplayError
			c.SetAttrib ebUCase_A & ebUCase_W & ebLCase_a & ebLCase_r & ebLCase_n & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e, strebDisplayError
		End If

		'Determine RefreshRate range
		Dim dblebDisplayMinRefreshRate As Double
		Dim dblebDisplayMaxRefreshRate As Double
		dblebDisplayMinRefreshRate = 39
		dblebDisplayMaxRefreshRate = 201
		If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_M & ebLCase_i & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e) Then dblebDisplayMinRefreshRate = CDbl(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_M & ebLCase_i & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e))
		If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e) Then dblebDisplayMaxRefreshRate = CDbl(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e))

		'Ensure that the refresh rate is within range
		If ebDisplay.CalculatedRefreshRate < dblebDisplayMinRefreshRate Or ebDisplay.CalculatedRefreshRate > dblebDisplayMaxRefreshRate Then
			' Only throw error if running fullscreen.
			' If windowed, E-Prime timing isn't guaranteed so we may proceed.
			If Not CLogical(c.GetAttribOrDefault(ebUCase_E & ebLCase_x & ebLCase_p & ebLCase_e & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t & ebDot & ebUCase_W & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_d, ebDigit_0)) Then
				'Unable to obtain a valid refresh rate.\n\nPlease ensure your display adapter is configured with the most recent and device specific driver.\n(Standard Display Adapter under Windows Vista is not compatible)
				Rte.AbortExperiment -999, ebUCase_U & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebSpace & ebLCase_t & ebLCase_o & ebSpace & ebLCase_o & ebLCase_b & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n & ebSpace & ebLCase_a & ebSpace & ebLCase_v & ebLCase_a & ebLCase_l & ebLCase_i & ebLCase_d & ebSpace & ebLCase_r & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebSpace & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_e & ebDot & ebLf & ebLf & ebUCase_P & ebLCase_l & ebLCase_e & ebLCase_a & ebLCase_s & ebLCase_e & ebSpace & ebLCase_e & ebLCase_n & ebLCase_s & ebLCase_u & ebLCase_r & ebLCase_e & ebSpace & ebLCase_y & ebLCase_o & ebLCase_u & ebLCase_r & ebSpace & ebLCase_d & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebLCase_a & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_g & ebLCase_u & ebLCase_r & ebLCase_e & ebLCase_d & ebSpace & ebLCase_w & ebLCase_i & ebLCase_t & ebLCase_h & ebSpace & ebLCase_t & ebLCase_h & ebLCase_e & ebSpace & ebLCase_m & ebLCase_o & ebLCase_s & ebLCase_t & ebSpace & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_a & ebLCase_n & ebLCase_d & ebSpace & ebLCase_d & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebSpace & ebLCase_s & ebLCase_p & ebLCase_e & ebLCase_c & ebLCase_i & ebLCase_f & ebLCase_i & ebLCase_c & ebSpace & ebLCase_d & ebLCase_r & ebLCase_i & ebLCase_v & ebLCase_e & ebLCase_r & ebDot & ebLf & ebParenOpen & ebUCase_S & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_d & ebSpace & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebUCase_A & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_u & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_r & ebSpace & ebUCase_W & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_o & ebLCase_w & ebLCase_s & ebSpace & ebUCase_V & ebLCase_i & ebLCase_s & ebLCase_t & ebLCase_a & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_p & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_b & ebLCase_l & ebLCase_e & ebParenClose
			End If
		End If
	End If
	'Assign the input device to filter for the ButtonDevice
	Button.AttachDevice CInputDevice(Rte.DeviceManager.GetDevice(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_I & ebLCase_n & ebLCase_p & ebLCase_u & ebLCase_t & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_T & ebLCase_o & ebUCase_F & ebLCase_i & ebLCase_l & ebLCase_t & ebLCase_e & ebLCase_r, Mouse.Name)))

	'Assign the DisplayName to filter for the ButtonDevice
	Button.DisplayName = c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e, ebEmptyText)

	Button.ReservedA = c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_A, ebEmptyText)
	Button.ReservedB = c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_B, ebEmptyText)
	Button.ReservedC = c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_C, ebEmptyText)
	Button.ReservedD = c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_D, ebEmptyText)
	Button.ShowHover = c.GetAttribOrDefault(CLogical(Button.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_H & ebLCase_o & ebLCase_v & ebLCase_e & ebLCase_r), True)
	Button.ShowDown = c.GetAttribOrDefault(CLogical(Button.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_D & ebLCase_o & ebLCase_w & ebLCase_n), True)
	Button.ShowFixated = c.GetAttribOrDefault(CLogical(Button.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_F & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_e & ebLCase_d), False)

End Sub



'--------------------------------------------------------------------------
' InitDevices
'
'--------------------------------------------------------------------------
Sub InitDevices(c As Context)

	PreInitDevices c


	Set MVNudpCommands = New SocketDevice
	MVNudpCommands.Name = "MVNudpCommands"

	Dim MVNudpCommandsSocketDeviceInfo As SocketDeviceInfo
	MVNudpCommandsSocketDeviceInfo.Server = "192.168.1.3"
	MVNudpCommandsSocketDeviceInfo.Port = 6004
	MVNudpCommandsSocketDeviceInfo.SocketType = ebProtocolUdp
	MVNudpCommandsSocketDeviceInfo.ByteOrdering = ebByteOrderingNative
	'Load values from context if they exist
	If c.AttribExists(MVNudpCommands.Name & ".Server") Then MVNudpCommandsSocketDeviceInfo.Server = c.GetAttrib(MVNudpCommands.Name & ".Server")
	If c.AttribExists(MVNudpCommands.Name & ".Port") Then MVNudpCommandsSocketDeviceInfo.Port = CLng(c.GetAttrib(MVNudpCommands.Name & ".Port"))
	If c.AttribExists(MVNudpCommands.Name & ".SocketType") Then MVNudpCommandsSocketDeviceInfo.SocketType = CLng(c.GetAttrib(MVNudpCommands.Name & ".SocketType"))
	If c.AttribExists(MVNudpCommands.Name & ".ByteOrdering") Then MVNudpCommandsSocketDeviceInfo.ByteOrdering = CLng(c.GetAttrib(MVNudpCommands.Name & ".ByteOrdering"))
	
	'Open the device, unless the context values indicate otherwise
	Dim MVNudpCommandsOpen As Boolean
	MVNudpCommandsOpen = True
	If c.AttribExists(MVNudpCommands.Name & ".Open") Then MVNudpCommandsOpen = CLogical(c.GetAttrib(MVNudpCommands.Name & ".Open"))
	If MVNudpCommandsOpen = True Then
		MVNudpCommands.Open MVNudpCommandsSocketDeviceInfo

	End If

	Set ebSound = New SoundDevice
	ebSound.Name = ebLCase_e & ebLCase_b & ebUCase_S & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d

	Dim ebSoundSoundDeviceInfo As SoundDeviceInfo
	ebSoundSoundDeviceInfo.API = ebSoundApiDirectSound
	ebSoundSoundDeviceInfo.DeviceIndex = 1
	ebSoundSoundDeviceInfo.Channels = 0
	ebSoundSoundDeviceInfo.SamplesPerSecond = 0
	ebSoundSoundDeviceInfo.BitsPerSample = 0
	ebSoundSoundDeviceInfo.DeviceReserved1 = 0
	ebSoundSoundDeviceInfo.DeviceReserved2 = 0
	ebSoundSoundDeviceInfo.DeviceReserved3 = 0
	ebSoundSoundDeviceInfo.DeviceReserved4 = 0
	ebSoundSoundDeviceInfo.DeviceReservedA = ebEmptyText
	ebSoundSoundDeviceInfo.DeviceReservedB = ebEmptyText
	ebSoundSoundDeviceInfo.DeviceReservedC = ebEmptyText
	ebSoundSoundDeviceInfo.DeviceReservedD = ebEmptyText

	'Load values from context if they exist
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_A & ebUCase_P & ebUCase_I) Then ebSoundSoundDeviceInfo.API = c.GetAttrib(ebSound.Name & ebDot & ebUCase_A & ebUCase_P & ebUCase_I)
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then ebSoundSoundDeviceInfo.DeviceIndex = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_C & ebLCase_h & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_e & ebLCase_l & ebLCase_s) Then ebSoundSoundDeviceInfo.Channels = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_C & ebLCase_h & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_e & ebLCase_l & ebLCase_s))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d) Then ebSoundSoundDeviceInfo.SamplesPerSecond = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_B & ebLCase_i & ebLCase_t & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e) Then ebSoundSoundDeviceInfo.BitsPerSample = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_B & ebLCase_i & ebLCase_t & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_1) Then ebSoundSoundDeviceInfo.DeviceReserved1 = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_1))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_2) Then ebSoundSoundDeviceInfo.DeviceReserved2 = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_2))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_3) Then ebSoundSoundDeviceInfo.DeviceReserved3 = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_3))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_4) Then ebSoundSoundDeviceInfo.DeviceReserved4 = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_4))
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_A) Then ebSoundSoundDeviceInfo.DeviceReservedA = c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_A)
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_B) Then ebSoundSoundDeviceInfo.DeviceReservedB = c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_B)
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_C) Then ebSoundSoundDeviceInfo.DeviceReservedC = c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_C)
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_D) Then ebSoundSoundDeviceInfo.DeviceReservedD = c.GetAttrib(ebSound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_D)
	
	'Open the device, unless the context values indicate otherwise
	Dim ebSoundOpen As Boolean
	ebSoundOpen = True
	If c.AttribExists(ebSound.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then ebSoundOpen = CLogical(c.GetAttrib(ebSound.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If ebSoundOpen = True Then
		ebSound.Open ebSoundSoundDeviceInfo
		ebSound.RTAdjustment = 0
		If c.AttribExists(ebSound.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then ebSound.RTAdjustment = CLng(c.GetAttrib(ebSound.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
		End If

	Set Keyboard = New KeyboardDevice
	Keyboard.Name = ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_b & ebLCase_o & ebLCase_a & ebLCase_r & ebLCase_d


	Dim KeyboardKeyboardDeviceInfo as KeyboardDeviceInfo
	KeyboardKeyboardDeviceInfo.CollectionMode = ebPressesOnly
	KeyboardKeyboardDeviceInfo.CapsLock = ebCapsLockOff
	KeyboardKeyboardDeviceInfo.NumLock = ebNumLockOn
	'Load values from context if they exist
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then KeyboardKeyboardDeviceInfo.CollectionMode = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_C & ebLCase_a & ebLCase_p & ebLCase_s & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k) Then KeyboardKeyboardDeviceInfo.CapsLock = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_C & ebLCase_a & ebLCase_p & ebLCase_s & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k) Then KeyboardKeyboardDeviceInfo.NumLock = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e) Then KeyboardKeyboardDeviceInfo.EmulateDeviceName = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e)
	
	'Open the device, unless the context values indicate otherwise
	Dim KeyboardOpen As Boolean
	KeyboardOpen = True
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then KeyboardOpen = CLogical(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If KeyboardOpen = True Then
		Keyboard.Open KeyboardKeyboardDeviceInfo
		Keyboard.RTAdjustment = 0
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Keyboard.RTAdjustment = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	
		Keyboard.AutoResponseEnabled = True
		Keyboard.AutoResponseTimeLimitLowerBound = ebDigit_2 & ebDigit_5 & ebPercent
		Keyboard.AutoResponseTimeLimitUpperBound = ebDigit_7 & ebDigit_5 & ebPercent
		Keyboard.AutoResponseTimeLimitWhenInfinite = 1000
		Keyboard.AutoResponseCorrectProbability = ebDigit_8 & ebDigit_0 & ebPercent
		Keyboard.AutoResponseAllowableOverride = ebEmptyText
		Keyboard.AutoResponseMaxCountLowerBound = ebDigit_2 & ebDigit_5 & ebPercent
		Keyboard.AutoResponseMaxCountUpperBound = ebDigit_7 & ebDigit_5 & ebPercent
		Keyboard.AutoResponseDelayBetweenResponses = 30
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d) Then Keyboard.AutoResponseEnabled = CLogical(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d))
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_L & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d) Then Keyboard.AutoResponseTimeLimitLowerBound = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_L & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_U & ebLCase_p & ebLCase_p & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d) Then Keyboard.AutoResponseTimeLimitUpperBound = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_U & ebLCase_p & ebLCase_p & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_W & ebLCase_h & ebLCase_e & ebLCase_n & ebUCase_I & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_n & ebLCase_i & ebLCase_t & ebLCase_e) Then Keyboard.AutoResponseTimeLimitWhenInfinite = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_W & ebLCase_h & ebLCase_e & ebLCase_n & ebUCase_I & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_n & ebLCase_i & ebLCase_t & ebLCase_e))
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_b & ebLCase_a & ebLCase_b & ebLCase_i & ebLCase_l & ebLCase_i & ebLCase_t & ebLCase_y) Then Keyboard.AutoResponseCorrectProbability = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_b & ebLCase_a & ebLCase_b & ebLCase_i & ebLCase_l & ebLCase_i & ebLCase_t & ebLCase_y)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_A & ebLCase_l & ebLCase_l & ebLCase_o & ebLCase_w & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebUCase_O & ebLCase_v & ebLCase_e & ebLCase_r & ebLCase_r & ebLCase_i & ebLCase_d & ebLCase_e) Then Keyboard.AutoResponseAllowableOverride = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_A & ebLCase_l & ebLCase_l & ebLCase_o & ebLCase_w & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebUCase_O & ebLCase_v & ebLCase_e & ebLCase_r & ebLCase_r & ebLCase_i & ebLCase_d & ebLCase_e)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_C & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebUCase_L & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d) Then Keyboard.AutoResponseMaxCountLowerBound = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_C & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebUCase_L & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_C & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebUCase_U & ebLCase_p & ebLCase_p & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d) Then Keyboard.AutoResponseMaxCountUpperBound = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_C & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebUCase_U & ebLCase_p & ebLCase_p & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_B & ebLCase_e & ebLCase_t & ebLCase_w & ebLCase_e & ebLCase_e & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebLCase_s) Then Keyboard.AutoResponseDelayBetweenResponses = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_B & ebLCase_e & ebLCase_t & ebLCase_w & ebLCase_e & ebLCase_e & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebLCase_s))
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Keyboard.SystemAbortWatchSequence = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Keyboard.ConditionalExitSequence = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Keyboard.UserBreakSequence = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
	
	End If

	Set Mouse = New MouseDevice
	Mouse.Name = ebUCase_M & ebLCase_o & ebLCase_u & ebLCase_s & ebLCase_e


	Dim MouseMouseDeviceInfo as MouseDeviceInfo
	MouseMouseDeviceInfo.OpenMode = ebMouseOpenModeDirect
	MouseMouseDeviceInfo.CollectionMode = ebPressesOnly
	MouseMouseDeviceInfo.ShowCursor = False
	'Load values from context if they exist
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then MouseMouseDeviceInfo.OpenMode = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then MouseMouseDeviceInfo.CollectionMode = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_C & ebLCase_u & ebLCase_r & ebLCase_s & ebLCase_o & ebLCase_r) Then MouseMouseDeviceInfo.ShowCursor = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_C & ebLCase_u & ebLCase_r & ebLCase_s & ebLCase_o & ebLCase_r))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e) Then MouseMouseDeviceInfo.EmulateDeviceName = c.GetAttrib(Mouse.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e)
	
	'Open the device, unless the context values indicate otherwise
	Dim MouseOpen As Boolean
	MouseOpen = True
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then MouseOpen = CLogical(c.GetAttrib(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If MouseOpen = True Then
		Mouse.Open MouseMouseDeviceInfo
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.SystemAbortWatchSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.ConditionalExitSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.UserBreakSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
			Mouse.RTAdjustment = 0
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Mouse.RTAdjustment = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	
	End If

	Set ebDisplay = New DisplayDevice
	ebDisplay.Name = ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y

	Dim ebDisplayDisplayDeviceInfo As DisplayDeviceInfo
	ebDisplayDisplayDeviceInfo.XRes = 640
	ebDisplayDisplayDeviceInfo.YRes = 480
	ebDisplayDisplayDeviceInfo.ColorDepth = 32
	ebDisplayDisplayDeviceInfo.DisplayIndex = 1
	ebDisplayDisplayDeviceInfo.UseDesktopSettings = False
	ebDisplayDisplayDeviceInfo.DefaultColor = Color.White
	ebDisplayDisplayDeviceInfo.RefreshRateRequested = 0
	ebDisplayDisplayDeviceInfo.NumPages = 0
	
	'Load values from context if they exist
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_X & ebUCase_R & ebLCase_e & ebLCase_s) Then ebDisplayDisplayDeviceInfo.XRes = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_X & ebUCase_R & ebLCase_e & ebLCase_s))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_Y & ebUCase_R & ebLCase_e & ebLCase_s) Then ebDisplayDisplayDeviceInfo.YRes = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_Y & ebUCase_R & ebLCase_e & ebLCase_s))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r & ebUCase_D & ebLCase_e & ebLCase_p & ebLCase_t & ebLCase_h) Then ebDisplayDisplayDeviceInfo.ColorDepth = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r & ebUCase_D & ebLCase_e & ebLCase_p & ebLCase_t & ebLCase_h))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then ebDisplayDisplayDeviceInfo.DisplayIndex = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r) Then ebDisplayDisplayDeviceInfo.DefaultColor = CColor(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d) Then ebDisplayDisplayDeviceInfo.RefreshRateRequested = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_P & ebLCase_a & ebLCase_g & ebLCase_e & ebLCase_s) Then ebDisplayDisplayDeviceInfo.NumPages = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_P & ebLCase_a & ebLCase_g & ebLCase_e & ebLCase_s))
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_s & ebLCase_k & ebLCase_t & ebLCase_o & ebLCase_p & ebUCase_S & ebLCase_e & ebLCase_t & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s) Then ebDisplayDisplayDeviceInfo.UseDesktopSettings = CLogical(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_s & ebLCase_k & ebLCase_t & ebLCase_o & ebLCase_p & ebUCase_S & ebLCase_e & ebLCase_t & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s))
	
	'Open the device, unless the context values indicate otherwise
	Dim ebDisplayOpen As Boolean
	ebDisplayOpen = True
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then ebDisplayOpen = CLogical(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If ebDisplayOpen = True Then
		ebDisplay.Open ebDisplayDisplayDeviceInfo
		ebDisplay.RefreshAlignment = ebDigit_0 & ebPercent
		If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_A & ebLCase_l & ebLCase_i & ebLCase_g & ebLCase_n & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then ebDisplay.RefreshAlignment = c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_A & ebLCase_l & ebLCase_i & ebLCase_g & ebLCase_n & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t)
			ebDisplay.RTAdjustment = 0
		If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then ebDisplay.RTAdjustment = CLng(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	End If

	'Enable flipping, if requested
	If c.AttribExists(ebDisplay.Name & ebDot & ebUCase_F & ebLCase_l & ebLCase_i & ebLCase_p & ebLCase_p & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d) Then
		ebDisplay.FlippingEnabled = CLogical(c.GetAttrib(ebDisplay.Name & ebDot & ebUCase_F & ebLCase_l & ebLCase_i & ebLCase_p & ebLCase_p & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d))
	Else
		ebDisplay.FlippingEnabled = True
	End If

	Set Button = New ButtonDevice
	Button.Name = ebUCase_B & ebLCase_u & ebLCase_t & ebLCase_t & ebLCase_o & ebLCase_n


	Dim ButtonButtonDeviceInfo as ButtonDeviceInfo
	ButtonButtonDeviceInfo.ResponseTypes = 196862
	ButtonButtonDeviceInfo.DblClickTime = 500
	ButtonButtonDeviceInfo.LongPressTime = 1000
	ButtonButtonDeviceInfo.FixationTime = 3000
	
	'Load values from context if they exist
	'Button.ResponseTypes
	ButtonButtonDeviceInfo.ResponseTypes = CLng(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebLCase_s, ButtonButtonDeviceInfo.ResponseTypes))

	'Button.ResponseTypeDown - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_D & ebLCase_o & ebLCase_w & ebLCase_n, False)), 2, 0))

	'Button.ResponseTypeClick - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_C & ebLCase_l & ebLCase_i & ebLCase_c & ebLCase_k, False)), 4, 0))

	'Button.ResponseTypeDblClick - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_D & ebLCase_b & ebLCase_l & ebUCase_C & ebLCase_l & ebLCase_i & ebLCase_c & ebLCase_k, False)), 8, 0))

	'Button.ResponseTypeHover - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_H & ebLCase_o & ebLCase_v & ebLCase_e & ebLCase_r, False)), 32, 0))

	'Button.ResponseTypeLongpress - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_L & ebLCase_o & ebLCase_n & ebLCase_g & ebLCase_p & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_s, False)), 16, 0))

	'Button.ResponseTypeFixation - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_F & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n, False)), 64, 0))

	'Button.ResponseTypeCheck - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_C & ebLCase_h & ebLCase_e & ebLCase_c & ebLCase_k, False)), 128, 0))

	'Button.ResponseTypeSecondary - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y, False)), 65536, 0))

	'Button.ResponseTypeInactive - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_I & ebLCase_n & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_v & ebLCase_e, False)), 131072, 0))

	'Button.ResponseTypeDisabled - BitMask
	ButtonButtonDeviceInfo.ResponseTypes = ButtonButtonDeviceInfo.ResponseTypes Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_y & ebLCase_p & ebLCase_e & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d, False)), 262144, 0))

	'Button.DblClickTime
	ButtonButtonDeviceInfo.DblClickTime = CLng(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_D & ebLCase_b & ebLCase_l & ebUCase_C & ebLCase_l & ebLCase_i & ebLCase_c & ebLCase_k & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e, ButtonButtonDeviceInfo.DblClickTime))

	'Button.LongPressTime
	ButtonButtonDeviceInfo.LongPressTime = CLng(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_L & ebLCase_o & ebLCase_n & ebLCase_g & ebUCase_P & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_s & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e, ButtonButtonDeviceInfo.LongPressTime))

	'Button.FixationTime
	ButtonButtonDeviceInfo.FixationTime = CLng(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_F & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e, ButtonButtonDeviceInfo.FixationTime))

	'Button.EmulateDeviceName
	ButtonButtonDeviceInfo.EmulateDeviceName = CStr(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e, ButtonButtonDeviceInfo.EmulateDeviceName))

	
	'Open the device, unless the context values indicate otherwise
	Dim ButtonOpen As Boolean
	ButtonOpen = True
	If c.AttribExists(Button.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then ButtonOpen = CLogical(c.GetAttrib(Button.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If ButtonOpen = True Then
		Button.Open ButtonButtonDeviceInfo

		'Button.RTAdjustment
		Button.RTAdjustment = CLng(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t, 0))

		'Button.PrimaryKeys
		Button.PrimaryKeys = CLng(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s, 255))

		'Button.PrimaryKeys.1 - BitMask
		Button.PrimaryKeys = Button.PrimaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_1, False)), 1, 0))

		'Button.PrimaryKeys.2 - BitMask
		Button.PrimaryKeys = Button.PrimaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_2, False)), 2, 0))

		'Button.PrimaryKeys.3 - BitMask
		Button.PrimaryKeys = Button.PrimaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_3, False)), 4, 0))

		'Button.PrimaryKeys.4 - BitMask
		Button.PrimaryKeys = Button.PrimaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_4, False)), 8, 0))

		'Button.PrimaryKeys.5 - BitMask
		Button.PrimaryKeys = Button.PrimaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_5, False)), 16, 0))

		'Button.PrimaryKeys.6 - BitMask
		Button.PrimaryKeys = Button.PrimaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_6, False)), 32, 0))

		'Button.PrimaryKeys.7 - BitMask
		Button.PrimaryKeys = Button.PrimaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_7, False)), 64, 0))

		'Button.PrimaryKeys.8 - BitMask
		Button.PrimaryKeys = Button.PrimaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_P & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_8, False)), 128, 0))

		'Button.SecondaryKeys
		Button.SecondaryKeys = CLng(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s, 255))

		'Button.SecondaryKeys.1 - BitMask
		Button.SecondaryKeys = Button.SecondaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_1, False)), 1, 0))

		'Button.SecondaryKeys.2 - BitMask
		Button.SecondaryKeys = Button.SecondaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_2, False)), 2, 0))

		'Button.SecondaryKeys.3 - BitMask
		Button.SecondaryKeys = Button.SecondaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_3, False)), 4, 0))

		'Button.SecondaryKeys.4 - BitMask
		Button.SecondaryKeys = Button.SecondaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_4, False)), 8, 0))

		'Button.SecondaryKeys.5 - BitMask
		Button.SecondaryKeys = Button.SecondaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_5, False)), 16, 0))

		'Button.SecondaryKeys.6 - BitMask
		Button.SecondaryKeys = Button.SecondaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_6, False)), 32, 0))

		'Button.SecondaryKeys.7 - BitMask
		Button.SecondaryKeys = Button.SecondaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_7, False)), 64, 0))

		'Button.SecondaryKeys.8 - BitMask
		Button.SecondaryKeys = Button.SecondaryKeys Or CLng(IIf(CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_y & ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_s & ebDot & ebDigit_8, False)), 128, 0))

		'Button.UseStartTime
		Button.UseStartTime = CLogical(c.GetAttribOrDefault(Button.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebUCase_S & ebLCase_t & ebLCase_a & ebLCase_r & ebLCase_t & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e, False))

		
	End If

	'Init All Devices
	Rte.DeviceManager.Init


	Dim theTheme As SlideButtonTheme
	Dim theFeedback As SlideButtonFeedback

	Set theTheme = New SlideButtonTheme
	theTheme.Name = ebUCase_B & ebLCase_a & ebLCase_s & ebLCase_e & ebUCase_B & ebLCase_u & ebLCase_t & ebLCase_t & ebLCase_o & ebLCase_n
	theTheme.LoadProperties

	Set theTheme = New SlideButtonTheme
	theTheme.Name = ebUCase_B & ebLCase_a & ebLCase_s & ebLCase_e & ebUCase_C & ebLCase_h & ebLCase_o & ebLCase_i & ebLCase_c & ebLCase_e
	theTheme.LoadProperties

	Set theTheme = New SlideButtonTheme
	theTheme.Name = ebUCase_B & ebLCase_a & ebLCase_s & ebLCase_e & ebUCase_S & ebLCase_l & ebLCase_i & ebLCase_d & ebLCase_e & ebLCase_r
	theTheme.LoadProperties

	GetSlideButtonTheme(ebUCase_B & ebLCase_a & ebLCase_s & ebLCase_e & ebUCase_B & ebLCase_u & ebLCase_t & ebLCase_t & ebLCase_o & ebLCase_n).Update
	GetSlideButtonTheme(ebUCase_B & ebLCase_a & ebLCase_s & ebLCase_e & ebUCase_C & ebLCase_h & ebLCase_o & ebLCase_i & ebLCase_c & ebLCase_e).Update
	GetSlideButtonTheme(ebUCase_B & ebLCase_a & ebLCase_s & ebLCase_e & ebUCase_S & ebLCase_l & ebLCase_i & ebLCase_d & ebLCase_e & ebLCase_r).Update
	
	PostInitDevices c

End Sub



'--------------------------------------------------------------------------
' PreInitObjects
'
'--------------------------------------------------------------------------
Sub PreInitObjects(c As Context)

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

End Sub


'--------------------------------------------------------------------------
' PostInitObjects
'
'--------------------------------------------------------------------------
Sub PostInitObjects(c As Context)

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

End Sub


'--------------------------------------------------------------------------
' InitObjects
'
'--------------------------------------------------------------------------
Sub InitObjects(c As Context)

	PreInitObjects c

	Set BlockList1 = New List
	BlockList1.Name = ebUCase_B & ebLCase_l & ebLCase_o & ebLCase_c & ebLCase_k & ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1
	'{D67BC233-7DF1-4367-83BA-EEDD3983135D}
	BlockList1.Guid = CGuid(&HD67BC233, &H7DF1, &H4367, &H83BA, &HEEDD3983, &H135D)
	BlockList1.Tag = ebEmptyText

	'Initialization for BlockList1
	
	Set BlockList1.Order = New RandomOrder
	CRandomOrder(BlockList1.Order).NoRepeatAfterReset = False
	Set BlockList1.Deletion = NoDeletion
	BlockList1.ResetEveryRun = True

	BlockList1.LoadProperties

	Set BlockList1.TerminateCondition = Cycles(1)
	Set BlockList1.ResetCondition = Samples(26)
	BlockList1.Reset
	
	Set Cuelist1 = New List
	Cuelist1.Name = ebUCase_C & ebLCase_u & ebLCase_e & ebLCase_l & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1
	'{0444CA7C-390C-4313-9575-06349E1F957A}
	Cuelist1.Guid = CGuid(&H0444CA7C, &H390C, &H4313, &H9575, &H06349E1F, &H957A)
	Cuelist1.Tag = ebEmptyText

	'Initialization for Cuelist1
	
	Set Cuelist1.Order = New SequentialOrder
	Set Cuelist1.Deletion = NoDeletion
	Cuelist1.ResetEveryRun = False

	Cuelist1.LoadProperties

	Set Cuelist1.TerminateCondition = Cycles(1)
	Set Cuelist1.ResetCondition = Samples(2)
	Cuelist1.Reset
	
	Set List2 = New List
	List2.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_2
	'{37DDC183-942A-48C0-AC18-CE7EE9E754D2}
	List2.Guid = CGuid(&H37DDC183, &H942A, &H48C0, &HAC18, &HCE7EE9E7, &H54D2)
	List2.Tag = ebEmptyText

	'Initialization for List2
	
	Set List2.Order = New SequentialOrder
	Set List2.Deletion = NoDeletion
	List2.ResetEveryRun = False

	List2.LoadProperties

	Set List2.TerminateCondition = Cycles(1)
	Set List2.ResetCondition = Samples(14)
	List2.Reset
	
	Set List1 = New List
	List1.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1
	'{5578EDA2-9BE0-4CE1-AD78-B2717D3AFBEF}
	List1.Guid = CGuid(&H5578EDA2, &H9BE0, &H4CE1, &HAD78, &HB2717D3A, &HFBEF)
	List1.Tag = ebEmptyText

	'Initialization for List1
	
	Set List1.Order = New SequentialOrder
	Set List1.Deletion = NoDeletion
	List1.ResetEveryRun = False

	List1.LoadProperties

	Set List1.TerminateCondition = Cycles(1)
	Set List1.ResetCondition = Samples(2)
	List1.Reset
	
	Set List3 = New List
	List3.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_3
	'{CF0B8FF7-1A4B-44D2-94BD-6CFD0125DA84}
	List3.Guid = CGuid(&HCF0B8FF7, &H1A4B, &H44D2, &H94BD, &H6CFD0125, &HDA84)
	List3.Tag = ebEmptyText

	'Initialization for List3
	
	Set List3.Order = New SequentialOrder
	Set List3.Deletion = NoDeletion
	List3.ResetEveryRun = False

	List3.LoadProperties

	Set List3.TerminateCondition = Cycles(1)
	Set List3.ResetCondition = Samples(7)
	List3.Reset
	
	Set SessionProc = New Procedure
	SessionProc.Name = ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c
	'{E9B63043-C03F-47DE-B3B0-E200D35C8723}
	SessionProc.Guid = CGuid(&HE9B63043, &HC03F, &H47DE, &HB3B0, &HE200D35C, &H8723)
	SessionProc.Tag = ebEmptyText

	SessionProc.LoadProperties
	SessionProc.Subroutine = ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set seq1 = New Procedure
	seq1.Name = ebLCase_s & ebLCase_e & ebLCase_q & ebDigit_1
	'{DE5D1D69-486B-4193-A336-1F88F0ADE7FF}
	seq1.Guid = CGuid(&HDE5D1D69, &H486B, &H4193, &HA336, &H1F88F0AD, &HE7FF)
	seq1.Tag = ebEmptyText

	seq1.LoadProperties
	seq1.Subroutine = ebLCase_s & ebLCase_e & ebLCase_q & ebDigit_1 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set cueprocedure = New Procedure
	cueprocedure.Name = ebLCase_c & ebLCase_u & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{265EBE30-CE85-419C-AA88-312B3CAC712A}
	cueprocedure.Guid = CGuid(&H265EBE30, &HCE85, &H419C, &HAA88, &H312B3CAC, &H712A)
	cueprocedure.Tag = ebEmptyText

	cueprocedure.LoadProperties
	cueprocedure.Subroutine = ebLCase_c & ebLCase_u & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set toetsenbordprocedure = New Procedure
	toetsenbordprocedure.Name = ebLCase_t & ebLCase_o & ebLCase_e & ebLCase_t & ebLCase_s & ebLCase_e & ebLCase_n & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_d & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{24C7B7C0-BC9A-4AF8-AB01-AB2308B6CD6A}
	toetsenbordprocedure.Guid = CGuid(&H24C7B7C0, &HBC9A, &H4AF8, &HAB01, &HAB2308B6, &HCD6A)
	toetsenbordprocedure.Tag = ebEmptyText

	toetsenbordprocedure.LoadProperties
	toetsenbordprocedure.Subroutine = ebLCase_t & ebLCase_o & ebLCase_e & ebLCase_t & ebLCase_s & ebLCase_e & ebLCase_n & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_d & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set sequentieprocedure = New Procedure
	sequentieprocedure.Name = ebLCase_s & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_t & ebLCase_i & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{31E3E039-42D3-40A6-B01E-3708D16A596F}
	sequentieprocedure.Guid = CGuid(&H31E3E039, &H42D3, &H40A6, &HB01E, &H3708D16A, &H596F)
	sequentieprocedure.Tag = ebEmptyText

	sequentieprocedure.LoadProperties
	sequentieprocedure.Subroutine = ebLCase_s & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_t & ebLCase_i & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set fixatieprocedure = New Procedure
	fixatieprocedure.Name = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{66628042-B1A8-4B0D-B059-E19FAE24D020}
	fixatieprocedure.Guid = CGuid(&H66628042, &HB1A8, &H4B0D, &HB059, &HE19FAE24, &HD020)
	fixatieprocedure.Tag = ebEmptyText

	fixatieprocedure.LoadProperties
	fixatieprocedure.Subroutine = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_e & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set responsprocedure = New Procedure
	responsprocedure.Name = ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{A1868462-7CDF-4B5F-B02A-1C8A53C9749B}
	responsprocedure.Guid = CGuid(&HA1868462, &H7CDF, &H4B5F, &HB02A, &H1C8A53C9, &H749B)
	responsprocedure.Tag = ebEmptyText

	responsprocedure.LoadProperties
	responsprocedure.Subroutine = ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set feedbackprocedure = New Procedure
	feedbackprocedure.Name = ebLCase_f & ebLCase_e & ebLCase_e & ebLCase_d & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{40D1E1D7-A248-4AB2-84B8-47A16C8C47A0}
	feedbackprocedure.Guid = CGuid(&H40D1E1D7, &HA248, &H4AB2, &H84B8, &H47A16C8C, &H47A0)
	feedbackprocedure.Tag = ebEmptyText

	feedbackprocedure.LoadProperties
	feedbackprocedure.Subroutine = ebLCase_f & ebLCase_e & ebLCase_e & ebLCase_d & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set cuelist2 = New Procedure
	cuelist2.Name = ebLCase_c & ebLCase_u & ebLCase_e & ebLCase_l & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_2
	'{17CC351C-ADE1-4DE3-B944-69FBBC7B2F6A}
	cuelist2.Guid = CGuid(&H17CC351C, &HADE1, &H4DE3, &HB944, &H69FBBC7B, &H2F6A)
	cuelist2.Tag = ebEmptyText

	cuelist2.LoadProperties
	cuelist2.Subroutine = ebLCase_c & ebLCase_u & ebLCase_e & ebLCase_l & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_2 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set nogoprocedure = New Procedure
	nogoprocedure.Name = ebLCase_n & ebLCase_o & ebLCase_g & ebLCase_o & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{9F6DE95F-7C4E-4004-8ACB-35AFF656D6B3}
	nogoprocedure.Guid = CGuid(&H9F6DE95F, &H7C4E, &H4004, &H8ACB, &H35AFF656, &HD6B3)
	nogoprocedure.Tag = ebEmptyText

	nogoprocedure.LoadProperties
	nogoprocedure.Subroutine = ebLCase_n & ebLCase_o & ebLCase_g & ebLCase_o & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set fixprocedure = New Procedure
	fixprocedure.Name = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
	'{4E92E5D5-5CB3-494A-84A2-C25AF88E0F8E}
	fixprocedure.Guid = CGuid(&H4E92E5D5, &H5CB3, &H494A, &H84A2, &HC25AF88E, &H0F8E)
	fixprocedure.Tag = ebEmptyText

	fixprocedure.LoadProperties
	fixprocedure.Subroutine = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_p & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n

	Set Instructie = New TextDisplay
	Instructie.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_e
	'{3261E1CF-EEF5-446E-918D-22CD033CB09D}
	Instructie.Guid = CGuid(&H3261E1CF, &HEEF5, &H446E, &H918D, &H22CD033C, &HB09D)
	Instructie.Tag = ebEmptyText

	Set InstructieEchoClients = New EchoClientCollection

	Instructie.LoadProperties

	Set Einde = New TextDisplay
	Einde.Name = ebUCase_E & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_e
	'{8209652D-95B7-4C5D-89FD-E09CA04A8635}
	Einde.Guid = CGuid(&H8209652D, &H95B7, &H4C5D, &H89FD, &HE09CA04A, &H8635)
	Einde.Tag = ebEmptyText

	Einde.LoadProperties

	Set Fback = New TextDisplay
	Fback.Name = ebUCase_F & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k
	'{EC42290B-85E4-4F8E-AFEA-25FE0A32A7B4}
	Fback.Guid = CGuid(&HEC42290B, &H85E4, &H4F8E, &HAFEA, &H25FE0A32, &HA7B4)
	Fback.Tag = ebEmptyText

	Fback.LoadProperties

	Set Fback2 = New TextDisplay
	Fback2.Name = ebUCase_F & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k & ebDigit_2
	'{95B2DC89-E08C-424A-93A9-FAB26EC59E58}
	Fback2.Guid = CGuid(&H95B2DC89, &HE08C, &H424A, &H93A9, &HFAB26EC5, &H9E58)
	Fback2.Tag = ebEmptyText

	Fback2.LoadProperties

	Set Pauze = New TextDisplay
	Pauze.Name = ebUCase_P & ebLCase_a & ebLCase_u & ebLCase_z & ebLCase_e
	'{4E4F6F8A-8667-4C1C-9042-C48AD6E56ADE}
	Pauze.Guid = CGuid(&H4E4F6F8A, &H8667, &H4C1C, &H9042, &HC48AD6E5, &H6ADE)
	Pauze.Tag = ebEmptyText

	Pauze.LoadProperties

	Set Nog3sec = New TextDisplay
	Nog3sec.Name = ebUCase_N & ebLCase_o & ebLCase_g & ebDigit_3 & ebLCase_s & ebLCase_e & ebLCase_c
	'{1ED9941D-3DB7-4BB3-A6B5-70789F09F716}
	Nog3sec.Guid = CGuid(&H1ED9941D, &H3DB7, &H4BB3, &HA6B5, &H70789F09, &HF716)
	Nog3sec.Tag = ebEmptyText

	Nog3sec.LoadProperties

	Set Nog2sec = New TextDisplay
	Nog2sec.Name = ebUCase_N & ebLCase_o & ebLCase_g & ebDigit_2 & ebLCase_s & ebLCase_e & ebLCase_c
	'{0FF76D00-D58A-4ADA-AE3D-346783AE570D}
	Nog2sec.Guid = CGuid(&H0FF76D00, &HD58A, &H4ADA, &HAE3D, &H346783AE, &H570D)
	Nog2sec.Tag = ebEmptyText

	Nog2sec.LoadProperties

	Set Nog1sec = New TextDisplay
	Nog1sec.Name = ebUCase_N & ebLCase_o & ebLCase_g & ebDigit_1 & ebLCase_s & ebLCase_e & ebLCase_c
	'{B7943AC6-DEB5-4822-AEB7-47F3836F114E}
	Nog1sec.Guid = CGuid(&HB7943AC6, &HDEB5, &H4822, &HAEB7, &H47F3836F, &H114E)
	Nog1sec.Tag = ebEmptyText

	Nog1sec.LoadProperties

	Set cue = New TextDisplay
	cue.Name = ebLCase_c & ebLCase_u & ebLCase_e
	'{1DF1D4C6-8C4D-47E4-A07F-24BBCC0AE95F}
	cue.Guid = CGuid(&H1DF1D4C6, &H8C4D, &H47E4, &HA07F, &H24BBCC0A, &HE95F)
	cue.Tag = ebEmptyText

	cue.LoadProperties

	Set toetsenbord = New TextDisplay
	toetsenbord.Name = ebLCase_t & ebLCase_o & ebLCase_e & ebLCase_t & ebLCase_s & ebLCase_e & ebLCase_n & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_d
	'{064C5ACF-EDFD-4446-AEFA-8556BF131FAF}
	toetsenbord.Guid = CGuid(&H064C5ACF, &HEDFD, &H4446, &HAEFA, &H8556BF13, &H1FAF)
	toetsenbord.Tag = ebEmptyText

	Set toetsenbordEchoClients = New EchoClientCollection

	toetsenbord.LoadProperties

	Set fixatie = New TextDisplay
	fixatie.Name = ebLCase_f & ebLCase_i & ebLCase_x & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_e
	'{CA4F0F1A-C854-4E01-AEAF-2ADAD14CBDE4}
	fixatie.Guid = CGuid(&HCA4F0F1A, &HC854, &H4E01, &HAEAF, &H2ADAD14C, &HBDE4)
	fixatie.Tag = ebEmptyText

	Set fixatieEchoClients = New EchoClientCollection

	fixatie.LoadProperties

	Set nogo = New TextDisplay
	nogo.Name = ebLCase_n & ebLCase_o & ebLCase_g & ebLCase_o
	'{6680E0AA-8C29-4F23-8941-9478047CD801}
	nogo.Guid = CGuid(&H6680E0AA, &H8C29, &H4F23, &H8941, &H9478047C, &HD801)
	nogo.Tag = ebEmptyText

	Set nogoEchoClients = New EchoClientCollection

	nogo.LoadProperties

	Set feedback = New TextDisplay
	feedback.Name = ebLCase_f & ebLCase_e & ebLCase_e & ebLCase_d & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k
	'{C02B374F-2D79-4C22-97E6-DCB355ABF84B}
	feedback.Guid = CGuid(&HC02B374F, &H2D79, &H4C22, &H97E6, &HDCB355AB, &HF84B)
	feedback.Tag = ebEmptyText

	Set feedbackEchoClients = New EchoClientCollection

	feedback.LoadProperties

	Set fout1 = New TextDisplay
	fout1.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1
	'{2F7D1A4F-67ED-4041-88F8-3EB4E4F7E0F7}
	fout1.Guid = CGuid(&H2F7D1A4F, &H67ED, &H4041, &H88F8, &H3EB4E4F7, &HE0F7)
	fout1.Tag = ebEmptyText

	fout1.LoadProperties

	Set fout2 = New TextDisplay
	fout2.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_2
	'{F5D2F13B-978E-4D27-A57B-FF6FA88E52AD}
	fout2.Guid = CGuid(&HF5D2F13B, &H978E, &H4D27, &HA57B, &HFF6FA88E, &H52AD)
	fout2.Tag = ebEmptyText

	fout2.LoadProperties

	Set fout3 = New TextDisplay
	fout3.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_3
	'{2D7A44FE-BF11-4F0E-B821-829C82529116}
	fout3.Guid = CGuid(&H2D7A44FE, &HBF11, &H4F0E, &HB821, &H829C8252, &H9116)
	fout3.Tag = ebEmptyText

	fout3.LoadProperties

	Set fout4 = New TextDisplay
	fout4.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_4
	'{CE8DEF8F-D746-42E7-8E3E-C8ADDFBDC01A}
	fout4.Guid = CGuid(&HCE8DEF8F, &HD746, &H42E7, &H8E3E, &HC8ADDFBD, &HC01A)
	fout4.Tag = ebEmptyText

	fout4.LoadProperties

	Set tevroeg = New TextDisplay
	tevroeg.Name = ebLCase_t & ebLCase_e & ebLCase_v & ebLCase_r & ebLCase_o & ebLCase_e & ebLCase_g
	'{A5C8B7FB-FE5B-4382-A2DB-F173BA38C918}
	tevroeg.Guid = CGuid(&HA5C8B7FB, &HFE5B, &H4382, &HA2DB, &HF173BA38, &HC918)
	tevroeg.Tag = ebEmptyText

	tevroeg.LoadProperties

	Set wacht = New TextDisplay
	wacht.Name = ebLCase_w & ebLCase_a & ebLCase_c & ebLCase_h & ebLCase_t
	'{DF687783-641F-4436-94E5-97D5FADAA89C}
	wacht.Guid = CGuid(&HDF687783, &H641F, &H4436, &H94E5, &H97D5FADA, &HA89C)
	wacht.Tag = ebEmptyText

	Set wachtEchoClients = New EchoClientCollection

	wacht.LoadProperties

	Set fout = New TextDisplay
	fout.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t
	'{D89B094F-7857-4BE6-A5AE-72A034C83AAB}
	fout.Guid = CGuid(&HD89B094F, &H7857, &H4BE6, &HA5AE, &H72A034C8, &H3AAB)
	fout.Tag = ebEmptyText

	fout.LoadProperties

	Set fout5 = New TextDisplay
	fout5.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_5
	'{03E3473E-271F-4C74-99FA-3D59CB8FBA5C}
	fout5.Guid = CGuid(&H03E3473E, &H271F, &H4C74, &H99FA, &H3D59CB8F, &HBA5C)
	fout5.Tag = ebEmptyText

	fout5.LoadProperties

	Set fout6 = New TextDisplay
	fout6.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_6
	'{C9AD544E-C2FF-4B70-B73E-9F02415AF401}
	fout6.Guid = CGuid(&HC9AD544E, &HC2FF, &H4B70, &HB73E, &H9F02415A, &HF401)
	fout6.Tag = ebEmptyText

	fout6.LoadProperties

	Set go = New TextDisplay
	go.Name = ebLCase_g & ebLCase_o
	'{F8B431AD-E49D-4AA5-83A9-80C557FC58D6}
	go.Guid = CGuid(&HF8B431AD, &HE49D, &H4AA5, &H83A9, &H80C557FC, &H58D6)
	go.Tag = ebEmptyText

	go.LoadProperties

	Set goed = New TextDisplay
	goed.Name = ebLCase_g & ebLCase_o & ebLCase_e & ebLCase_d
	'{45CA3428-21EC-4BD1-B17A-B96C93545CA7}
	goed.Guid = CGuid(&H45CA3428, &H21EC, &H4BD1, &HB17A, &HB96C9354, &H5CA7)
	goed.Tag = ebLCase_p & ebLCase_e & ebLCase_r & ebLCase_f & ebLCase_e & ebLCase_c & ebLCase_t

	goed.LoadProperties

	Set fout7 = New TextDisplay
	fout7.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_7
	'{9A2FAA0F-F11A-4AEA-84B6-C22E6B92B215}
	fout7.Guid = CGuid(&H9A2FAA0F, &HF11A, &H4AEA, &H84B6, &HC22E6B92, &HB215)
	fout7.Tag = ebEmptyText

	fout7.LoadProperties

	Set fout8 = New TextDisplay
	fout8.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_8
	'{5BF19AD8-5E87-479F-B5D7-8293600EC818}
	fout8.Guid = CGuid(&H5BF19AD8, &H5E87, &H479F, &HB5D7, &H8293600E, &HC818)
	fout8.Tag = ebEmptyText

	fout8.LoadProperties

	Set fout9 = New TextDisplay
	fout9.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_9
	'{828A23CB-D728-4EE6-8449-774DA732D8D7}
	fout9.Guid = CGuid(&H828A23CB, &HD728, &H4EE6, &H8449, &H774DA732, &HD8D7)
	fout9.Tag = ebEmptyText

	fout9.LoadProperties

	Set fout10 = New TextDisplay
	fout10.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_0
	'{BD892D50-EF7B-4707-9535-EF15E8E84A43}
	fout10.Guid = CGuid(&HBD892D50, &HEF7B, &H4707, &H9535, &HEF15E8E8, &H4A43)
	fout10.Tag = ebEmptyText

	fout10.LoadProperties

	Set fout11 = New TextDisplay
	fout11.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_1
	'{5F7019DB-1039-4499-BDD9-18C0F7DAA85E}
	fout11.Guid = CGuid(&H5F7019DB, &H1039, &H4499, &HBDD9, &H18C0F7DA, &HA85E)
	fout11.Tag = ebEmptyText

	fout11.LoadProperties

	Set fout12 = New TextDisplay
	fout12.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_2
	'{4FDC1C1E-3F70-49D6-9B6B-3857763369C2}
	fout12.Guid = CGuid(&H4FDC1C1E, &H3F70, &H49D6, &H9B6B, &H38577633, &H69C2)
	fout12.Tag = ebEmptyText

	fout12.LoadProperties

	Set fout13 = New TextDisplay
	fout13.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_3
	'{6BEFB71C-B701-4573-8191-72B040A9091E}
	fout13.Guid = CGuid(&H6BEFB71C, &HB701, &H4573, &H8191, &H72B040A9, &H091E)
	fout13.Tag = ebEmptyText

	fout13.LoadProperties

	Set fout14 = New TextDisplay
	fout14.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_4
	'{1592F46F-2CA8-4D9F-AD05-3CE363AAB327}
	fout14.Guid = CGuid(&H1592F46F, &H2CA8, &H4D9F, &HAD05, &H3CE363AA, &HB327)
	fout14.Tag = ebEmptyText

	fout14.LoadProperties

	Set fout15 = New TextDisplay
	fout15.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_5
	'{8C374CFF-2684-4D4C-8AD1-A4D28AE3B392}
	fout15.Guid = CGuid(&H8C374CFF, &H2684, &H4D4C, &H8AD1, &HA4D28AE3, &HB392)
	fout15.Tag = ebEmptyText

	fout15.LoadProperties

	Set fout16 = New TextDisplay
	fout16.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_6
	'{D39B23E2-CEB7-4A11-9074-BE86C119947D}
	fout16.Guid = CGuid(&HD39B23E2, &HCEB7, &H4A11, &H9074, &HBE86C119, &H947D)
	fout16.Tag = ebEmptyText

	fout16.LoadProperties

	Set fout17 = New TextDisplay
	fout17.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_7
	'{7483E3F9-5B51-4F8F-9633-00EB332F5A24}
	fout17.Guid = CGuid(&H7483E3F9, &H5B51, &H4F8F, &H9633, &H00EB332F, &H5A24)
	fout17.Tag = ebEmptyText

	fout17.LoadProperties

	Set fout18 = New TextDisplay
	fout18.Name = ebLCase_f & ebLCase_o & ebLCase_u & ebLCase_t & ebDigit_1 & ebDigit_8
	'{8298CBBF-6BA8-4752-9823-7F91665384EA}
	fout18.Guid = CGuid(&H8298CBBF, &H6BA8, &H4752, &H9823, &H7F916653, &H84EA)
	fout18.Tag = ebEmptyText

	fout18.LoadProperties

	PostInitObjects c


End Sub


'--------------------------------------------------------------------------
' InitPackages
'
'--------------------------------------------------------------------------
Sub InitPackages(c As Context)

End Sub



'--------------------------------------------------------------------------
' InitGlobals
'
'--------------------------------------------------------------------------
Sub InitGlobals(c As Context)


	'Assign Context to the StartupInfo object
	Set Rte.StartupInfo.Context = c

	'Load and Transfer external StartupInfo
	Rte.StartupInfo.Load
	Rte.StartupInfo.Transfer

End Sub



'--------------------------------------------------------------------------


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitGlobals
'--------------------------------------------------------------------------
Sub UnInitGlobals()

	'Close the external StartupInfo
	Rte.StartupInfo.Close

End Sub
'--------------------------------------------------------------------------
' UnInitDevices
'--------------------------------------------------------------------------
Sub UnInitDevices()

	'UnInit All Devices
	Rte.DeviceManager.UnInit

	MVNudpCommands.Close
	Set MVNudpCommands = Nothing
	ebSound.Close

	Keyboard.Close
	Set Keyboard = Nothing

	Mouse.Close
	Set Mouse = Nothing

	ebDisplay.Close
	Set ebDisplay = Nothing

	Button.Close
	Set Button = Nothing

End Sub


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitPackages
'--------------------------------------------------------------------------
Sub UnInitPackages()
End Sub


'--------------------------------------------------------------------------
' UnInitObjects
'
'--------------------------------------------------------------------------
Sub UnInitObjects()

	Set BlockList1 = Nothing

	Set Cuelist1 = Nothing

	Set List2 = Nothing

	Set List1 = Nothing

	Set List3 = Nothing

	Set SessionProc = Nothing

	Set seq1 = Nothing

	Set cueprocedure = Nothing

	Set toetsenbordprocedure = Nothing

	Set sequentieprocedure = Nothing

	Set fixatieprocedure = Nothing

	Set responsprocedure = Nothing

	Set feedbackprocedure = Nothing

	Set cuelist2 = Nothing

	Set nogoprocedure = Nothing

	Set fixprocedure = Nothing

	Set Instructie = Nothing

	Set InstructieEchoClients = Nothing

	Set Einde = Nothing

	Set Fback = Nothing

	Set Fback2 = Nothing

	Set Pauze = Nothing

	Set Nog3sec = Nothing

	Set Nog2sec = Nothing

	Set Nog1sec = Nothing

	Set cue = Nothing

	Set toetsenbord = Nothing

	Set toetsenbordEchoClients = Nothing

	Set fixatie = Nothing

	Set fixatieEchoClients = Nothing

	Set nogo = Nothing

	Set nogoEchoClients = Nothing

	Set feedback = Nothing

	Set feedbackEchoClients = Nothing

	Set fout1 = Nothing

	Set fout2 = Nothing

	Set fout3 = Nothing

	Set fout4 = Nothing

	Set tevroeg = Nothing

	Set wacht = Nothing

	Set wachtEchoClients = Nothing

	Set fout = Nothing

	Set fout5 = Nothing

	Set fout6 = Nothing

	Set go = Nothing

	Set goed = Nothing

	Set fout7 = Nothing

	Set fout8 = Nothing

	Set fout9 = Nothing

	Set fout10 = Nothing

	Set fout11 = Nothing

	Set fout12 = Nothing

	Set fout13 = Nothing

	Set fout14 = Nothing

	Set fout15 = Nothing

	Set fout16 = Nothing

	Set fout17 = Nothing

	Set fout18 = Nothing


End Sub


'--------------------------------------------------------------------------
' Main
'
'--------------------------------------------------------------------------
Sub Main()

	' Create and initialize the default context, data file,
	' and provide global access to the context.
	Dim c As Context
	Set c = New Context
	c.Name = "ebContext"
	Set c.DataFile = New DataFile
	c.PushNewFrame
	Set ebContext = c

	' Set the log level names
	c.SetLogLevelName 1, "Session"
	c.SetLogLevelName 2, "Block"
	c.SetLogLevelName 3, "Trial"
	c.SetLogLevelName 4, "SubTrial"
	c.SetLogLevelName 5, "LogLevel5"
	c.SetLogLevelName 6, "LogLevel6"
	c.SetLogLevelName 7, "LogLevel7"
	c.SetLogLevelName 8, "LogLevel8"
	c.SetLogLevelName 9, "LogLevel9"
	c.SetLogLevelName 10, "LogLevel10"

	' Set standard logging items
	ebContext.SetAttrib "Experiment", "Sequence A 6"
	ebContext.SetAttrib "SessionDate", Date$
	ebContext.SetAttrib "SessionTime", Time$
	ebContext.SetAttrib "SessionStartDateTimeUtc", NowUtc()

	'Initialize global variables for packages
	InitGlobals c

	' Initialize the Display Device(s) for runtime
	Dim ebDisplayDisplayDeviceInfo As DisplayDeviceInfo
	ebDisplayDisplayDeviceInfo.DefaultColor = Color.White
	ebDisplayDisplayDeviceInfo.DisplayIndex = 1
	If c.AttribExists(ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r) Then ebDisplayDisplayDeviceInfo.DefaultColor = CColor(c.GetAttrib(ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r))
	If c.AttribExists(ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then ebDisplayDisplayDeviceInfo.DisplayIndex = CLng(c.GetAttrib(ebLCase_e & ebLCase_b & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))

	
	
	If CLogical(c.GetAttribOrDefault("Experiment.Windowed", "False")) Then
		CreateDefaultPortWindowed ebDisplayDisplayDeviceInfo.DisplayIndex
	Else
		CreateDefaultPort ebDisplayDisplayDeviceInfo.DefaultColor, "", ebDisplayDisplayDeviceInfo.DisplayIndex
	End If
	
	If Basic.OS = ebWin32 Then
		WinActivate "E-Run Experiment Window"
	End If

	' Get the StartupInfo

	' Set the defaults for all of the StartupInfo
	If Not c.AttribExists("Subject") Then c.SetAttrib "Subject", "1"
	If Not c.AttribExists("Session") Then c.SetAttrib "Session", "1"

	' Determine if StartupInfo.UseDefaults exists and is True/False to override prompts for StartupInfo parameters
	Dim bStartupInfoUseDefaults As Boolean
	bStartupInfoUseDefaults = False
	If c.AttribExists("StartupInfo.UseDefaults") Then bStartupInfoUseDefaults = CLogical(c.GetAttrib("StartupInfo.UseDefaults"))
	If Not bStartupInfoUseDefaults Then

		Dim vAnswer As Variant
StartupInfo_Begin:

StartupInfoPrompt_Subject:
		vAnswer = AskBox("Please enter the Subject Number (1-32767, 0=No Data Logging):", c.GetAttrib("Subject"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) < 0 Then
				MsgBox "The value for Subject must not be less than 0"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Subject must not be greater than 32767"
				GoTo StartupInfoPrompt_Subject
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Subject", CStr(vAnswer)

StartupInfoPrompt_Session:
		vAnswer = AskBox("Please enter the Session Number (1-32767):", c.GetAttrib("Session"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) < 1 Then
				MsgBox "The value for Session must not be less than 1"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Session must not be greater than 32767"
				GoTo StartupInfoPrompt_Session
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Session", CStr(vAnswer)

		' Display the summary
		Dim strSummary As String
		strSummary = "Subject:    " & c.GetAttrib("Subject") & "\n"
		strSummary = strSummary & "Session:    " & c.GetAttrib("Session") & "\n"
		strSummary = strSummary & "\nContinue with the above startup info?"

		Dim nSummaryAnswer As Integer
		nSummaryAnswer = MsgBox(strSummary, ebYesNoCancel, "Summary of Startup Info")
		If nSummaryAnswer = ebNo Then
				GoTo StartupInfo_Begin
		ElseIf nSummaryAnswer = ebCancel Then
				GoTo ExperimentAbort
		End If

	End If


	'Assign the Clock.Scale value
	Clock.Scale = 1.000000

	'If the attribute Clock.Scale.Override exists
	'  then use it for to set the Clock.Scale value
	If c.AttribExists("Clock.Scale.Override") Then
		Clock.Scale = CDbl(c.GetAttrib("Clock.Scale.Override"))
	End If

	' Set the Filenames for the data files
	Dim strFilenameBase As String
	Dim strFilenameRecovery As String
	Dim strFilenameEDAT As String
	Dim strFileNameTXT As String

	'If the attribute DataFile.Filename.Override exists
	'  then use it for the .txt and .edat3 filenames
	If c.AttribExists("DataFile.Filename.Override") Then

		' Set the default Data Filename
		strFilenameBase = CStr(c.GetAttrib("DataFile.Filename.Override"))

	Else

		' Set the default Data Filename
		strFilenameBase = c.GetAttrib("Experiment") &_ 
				"-" &_ 
				c.GetAttrib("Subject") &_ 
				"-" &_ 
				c.GetAttrib("Session")

	End If

	'Set the name of the data file
	strFilenameRecovery = strFilenameBase & ".txt"
	strFilenameEDAT = strFilenameBase & ".edat3"
	strFileNameTXT = strFilenameBase & "-Export.txt"
	c.DataFile.Filename = strFilenameRecovery
	c.SetAttrib "DataFile.Basename", strFilenameBase

	' If we are logging data, then prompt to overwrite the data file if it exists
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		If FileExists(c.DataFile.Filename) Or FileExists(strFilenameEDAT) Or FileExists(strFileNameTXT) Then
			If ebYes <> MsgBox("WARNING: The data file and/or recovery file already exists:\nFILE: " & c.DataFile.Filename & "\n\nDo you want to overwrite?", ebYesNo) Then
				GoTo ExperimentAbort
			End If
			' If you receive an error here then ensure that your E-Recovery (txt) file or 
			' the edat3 file is not open and then try the experiment run again.
			If FileExists(strFilenameEDAT) Then Kill strFilenameEDAT
			If FileExists(strFileNameTXT) Then Kill strFileNameTXT
			If FileExists(c.DataFile.Filename) Then Kill c.DataFile.Filename
		End If
	End If

	' Set defaults for RandomSeed and GroupNumber if StartupInfo did not assign their values
	If Not c.AttribExists("RandomSeed") Then c.SetAttrib "RandomSeed", PRNG.GetSeed()
	If Not c.AttribExists("Group") Then c.SetAttrib "Group", "1"

	'Set the random seed
	Randomize CLng(c.GetAttrib("RandomSeed"))

	' Initialize Experiment Advisor Properties
	Rte.ExperimentAdvisor.LoadProperties
	If c.AttribExists("Rte.ExperimentAdvisor.Enabled") Then Rte.ExperimentAdvisor.Enabled = CLogical(c.GetAttrib("Rte.ExperimentAdvisor.Enabled"))
	If c.AttribExists("Rte.ExperimentAdvisor.Filename") Then Rte.ExperimentAdvisor.Filename = CStr(c.GetAttrib("Rte.ExperimentAdvisor.Filename"))


	Dim nPriority As Long
	'Priority for init routines
	nPriority = 3

	'Determine if the priority should use the override value
	If c.AttribExists("SetOSThreadPriority.Init.Override") Then
		nPriority = c.GetAttrib("SetOSThreadPriority.Init.Override")
	End If

	'Update E-Prime Priority for INIT routines
	SetOSThreadPriority nPriority

	' Initialize all system devices, packages, and objects
	InitDevices c
	InitPackages c
	InitObjects c

	'Priority for start of experiment
	nPriority = -1

	'Determine if the priority should use the override value
	If c.AttribExists("SetOSThreadPriority.Override") Then
		nPriority = c.GetAttrib("SetOSThreadPriority.Override")
	End If

	'Update E-Prime Priority for start of experiment
	SetOSThreadPriority nPriority

	'Disable System power save mode
	Rte.PreventSystemIdle = True

	If CLng(c.GetAttrib("Subject")) < 0 Then
		Rte.AbortExperiment 12102, ebUCase_S & ebLCase_u & ebLCase_b & ebLCase_j & ebLCase_e & ebLCase_c & ebLCase_t & ebSpace & ebLCase_c & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_l & ebLCase_e & ebLCase_s & ebLCase_s & ebSpace & ebLCase_t & ebLCase_h & ebLCase_a & ebLCase_n & ebSpace & ebDigit_0 & ebDot
	End If

	If CLng(c.GetAttrib("Session")) < 1 Then
		Rte.AbortExperiment 12103, ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebSpace & ebLCase_c & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_l & ebLCase_e & ebLCase_s & ebLCase_s & ebSpace & ebLCase_t & ebLCase_h & ebLCase_a & ebLCase_n & ebSpace & ebDigit_1 & ebDot
	End If

	' If we are logging data, then open the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Open
		c.LogHeader
	End If


	'Setup the DataFile.BaseName attribute
	c.SetAttrib "DataFile.BaseName", Replace(c.DataFile.Filename, ".txt", ebEmptyText)

	' Log clock timing information
	c.SetAttrib "Clock.Information", Clock.Information

	' Log E-Studio version
	c.SetAttrib "StudioVersion", "3.0.3.43"

	' Log runtime version.
	c.SetAttrib "RuntimeVersion", Rte.Version.Major & ebDot & Rte.Version.Minor & ebDot & Rte.Version.Internal & ebDot & Rte.Version.Build
	c.SetAttrib "RuntimeVersionExpected", 3 & ebDot & 0 & ebDot & 3 & ebDot & 60
	c.SetAttrib "RuntimeCapabilities", ebUCase_F & ebLCase_u & ebLCase_l & ebLCase_l

	' Log experiment version
	c.SetAttrib "ExperimentVersion", "1.0.0.685"

	' ExperimentStart
	 Rte.ExperimentStart
	' Start the running of the Experiment
	SessionProc.Run c
	' ExperimentFinish
	 Rte.ExperimentFinish

	' Clean up the context and close the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		Dim nDataFileConvertProgress As Long
		nDataFileConvertProgress = ebProgressSimple
		If c.AttribExists("DataFile.ConvertProgress") Then nDataFileConvertProgress = CLng(c.GetAttrib("DataFile.ConvertProgress"))
		c.DataFile.Close
		' Attempt to convert the recovery file into a data file
		Dim nConvert As Long
		nConvert = c.DataFile.Convert(nDataFileConvertProgress, False)

		If nConvert = 0 Then
			' Settings in E-Studio are set to not remove E-Recovery file
		Else
			' The datafile failed to convert!
			MsgBox "ERROR: The datafile did not convert!\nFILE: " & c.DataFile.Filename & "\n\nIt is recommended that you recover your data with the E-Recovery utility"
			MsgBox c.DataFile.GetLastErrorMessage()
		End If
	End If
ExperimentFinish:

	UnInitObjects

	UnInitPackages
	UnInitDevices

	UnInitGlobals

	' Experiment Advisor Report Generation
	If Rte.ExperimentAdvisor.Enabled = True Then
		If Len(Rte.ExperimentAdvisor.Filename) = 0 Then Rte.ExperimentAdvisor.Filename = Replace(c.DataFile.Filename, ".txt", "-ExperimentAdvisorReport.xml")
		Rte.ExperimentAdvisor.GenerateReport


	End If


ExperimentAbort:

	' Clean up the context
	c.PopFrame
	Set c = Nothing
	Set ebContext = Nothing

	DestroyDefaultPort

End Sub
